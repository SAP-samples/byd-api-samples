{
	"info": {
		"_postman_id": "14f6eb16-5ccd-4433-a7a2-e8441ff0d4ef",
		"name": "Sales and Commerce Scenarios",
		"description": "SAP Business ByDesign API Samples - Sales and Commerce Scenarios\n================================================================\n\nThis Postman collection contains examples to create, change and read business objects and to run end-to-end business processes using *SAP Business ByDesign Custom OData Services*.\nEach collection folder corresponds to a business scenario; execute the web service requests in the listed order within each folder.\n\nAll sample data is aligned to and ready to run on *SAP Business ByDesign Partner Demo Tenants (Full scope US)* with preconfigured and loaded sample data provided by SAP.  \n&nbsp; \n\n\n**Web services and User:**\n\nThe OData services used in this collection require a SAP ByDesign business user for authorization.  \n&nbsp; \n\nSAP ByDesign business objects provide defaulting capabilities based on the organizational assignment of the user logged in. In many sample OData requests I use this defaulting to keep the OData requests simple.  \nTherefore, assign the employee or service agent that is associated to your business user to the organizational unit *A1100* and job *System Administrator* to ensure proper defaulting based on your organizational assignment.  \n&nbsp; \n\nThe OData requests in this collection use the following SAP Bydesign *Custom OData Services* assigned to the work center views in column *User authorization*. Assign the listed SAP ByDesign Work Center Views to your business user:\n\n| Custom OData Service | User authorization (ByD Work Center View) |  \n|----------------------|-------------------------------------------|  \n| *khsalesorder* | *Sales Orders - Sales Orders* |  \n| *khcustomerinvoicerequest* | *Customer Invoicing - Invoice Requests* |  \n| *khcustomerinvoice* | *Customer Invoicing - Invoice Documents* |  \n| *khcustomerreturn* | *Sales Orders - Returns* |\n| *khoutbounddeliveryrequest* | *Outbound Logistics - Delivery Proposals* |  \n| *khoutbounddelivery* | *Outbound Logistics - Outbound Deliveries* |  \n| *khinbounddelivery* | *Inbound Logistics - Inbound Delivery Notifications* |\n| *khconfirmedinbounddelivery* | *Inbound Logistics - Inbound Deliveries* |\n| *khhousebankaccount* | *Liquidity Management - My Banks* |\n| *khcompanypaymentfileregister* | *Liquidity Management - Inbound Files* |\n| *khhousebankstatement* | *Liquidity Management - Bank Statements* |\n| *khpayment* | *Payment Management - Payment Monitor* |\n| *khpaymentorderprocessingstatement* | *Payment Management - Clearing House Statements* |\n\n&nbsp; \n\nAdditionally this collection uses the SOAP Web Service APIs:  \n- *Manage Sales Orders* (required because external payment information cannot be created using OData)\n- *Manage Customer Invoice Requests* (required because external payment information cannot be created using OData)  \n\nSteps to configure SOAP the Web Service APIs:\n1. Work center view *Application and User Management - Communication Systems*: Create a communication system\n2. Work center view *Application and User Management - Communication Scenarios*: Create a communication scenario with web service APIs listed above\n3. Work center view *Application and User Management - Communication Arrangements*: Create communication arrangement for your scenario of step 2, the communication system of step 1 and enter the credentials  \n&nbsp; \n\n\n**Business Configuration:**  \n\nThe following fine tuning settings are required additionally to the preconfigured and loaded sample data provided by the SAP Business ByDesign Partner Demo Tenant.  \n&nbsp; \n\nConfigure the determination methode for external references:  \nByD work center *Business Configuration*: Open the fine tuning activity *External Reference Number Determination for Customer Invoice* and set the determination method to *Copied from Predecessor Reference ID*.  \n&nbsp; \n\nCreate company payment file register:  \nOpen work center view *Liquidity Management - Inbound Files*, click on *New* > *Inbound File* and enter the following values:  \n\t*Type: Bank Statement* | *Company: 1000* | *Bank ID: 1000002* | *Import Format: BAI2 US*.  \nSave without adding an attachment.  \nThe system created a company payment file register for company 1000 that can now be used for file uploads via OData.  \n&nbsp; \n\nThe bank statements created in this collection are automatically allocated if you apply the following fine tuning settings:  \n1. Fine-Tuning activity *Automatically Generated Bank Statements* > *Assign import formats for bank statements*:  \nAdd row using the values: *Company ID: 1000* | *Bank ID: 1000002* | *Bank Statement Format: 02 - BAI2 US*\n2. Fine-Tuning activity *Settings for Posting Automatically Generated Bank Statements*:  \nAdd row using the values: Seq.: 1 | Company: 1000 | Bank Country: * | Bank ID: * | Currency: * | Bank Account ID: * | Manual Post Necessary: False\n3. Fine-Tuning activity *Global Settings for Payment* > *Create and edit rules for analyzing memo lines*:  \nAdd a rules: \n\t- Rule 1: *Description: Customer Return External Reference* | *Rule Type: 13* | *Rule Definition Mode: Expert* | *Regular Expression: (E-CRN-\\d{4}-\\d{2}-\\d{4}\\d{1,2}\\d{1,2}\\d{2}\\d{2}\\d{2})*\n\t- Rule 2: *Description: Sales Order External Payment* | *Rule Type: 14* | *Rule Definition Mode: Expert* | *Regular Expression: (E-PAYTAREF-\\d{4}\\d{1,2}\\d{1,2}\\d{2}\\d{2}\\d{2})*\n4. Fine-Tuning activity *Automatically Generated Bank Statements* > *Edit import formats for automatic generated bank statements*:\nAdd two rows to Import Format \"02 - BAI2 US\":\n\t- Transaction code assignment 1: *External Transaction Code: 399* | *Description: Miscellaneous Credit* | *Debit/Credit: Increase* | *Payment Method: Payment Processing - Of Incoming External Payment*\n\t- Transaction code assignment 2: *External Transaction Code: 699* | *Description: Miscellaneous Debit* | *Debit/Credit: Decrease* | *Payment Method: Payment Processing - Of Outgoing Direct Debit*  \n\n\tRemark: Basically you can use any external transaction codes, you just have to make sure that the transaction codes match the codes used to create the bank statement file. The setting of transaction code assignment 2 is required to trigger the automated allocation of the bank statement line item to the credit memo open item related to customer returns (customer returns do not yet result in payments in transfer, but remain open items).  \n&nbsp; \n\n**New Payment Register/Payment Monitor:**  \n\nOData access to the SAP ByDesign *Payment Monitor* (business object *PaymentRegister*) requires to activate the new high-performance payment register/payment monitor.  \n\nYou can check if the new payment monitor is already active in your system by sending the following request:  \nPostman collection *Sales and Commerce Scenarios* > folder *Miscellaneous Samples* > request *Get payments (new payment monitor)*.  \nThe OData service request retrieves all payment register entries of the last 30 days; if the OData service response is empty and you see some entries in the payment monitor in ByD work center view *Payment Management - Payment Monitor*, then the new payment register is not active in your system.  \n\nYou can request to activate the new payment register by creating an SAP ByDesign incident.  \n&nbsp; \n\n\n**Additional Information:**  \nThe sales order origin type (*DataOriginTypeCode*) can be used integrate webshops with ByD. Relevant code values for the examples in collection are *1 - Manual data entry* and *4 - Internet order (webshop integration)*.  \nCompare blog post [Create ByD Sales Orders using Web Services](https://blogs.sap.com/2017/08/10/create-byd-sales-orders-using-web-services/) for more details.  \n&nbsp; \n\n\nScenario 1a: eCommerce - Sell from stock with external payment\n--------------------------------------------------------------\n\nScenario steps:\n1. Create and release sales order with external payment information (SOAP Web Service API)\n2. Get and check delivery proposal (Business object *OutboundDeliveryRequest*)\n3. Post goods issue\n4. Get, check and release outbound delivery (Business object *OutboundDelivery*)\n5. Get, check and release the customer invoice request\n6. Get, check and release customer invoice\n7. Check sales order status\n\nIf the availability check fails, you can fill up your stock using Postman collection **End-to-End Scenarios** and scenario **Procure to Stock**.  \n\nPayments in transfer created by this scenario can be confirmed using scenario **eCommerce - Confirm payments using bank statements**.  \n&nbsp; \n\n\nScenario 1b: eCommerce - Customer return to stock\n-------------------------------------------------\n\nScenario steps:\n1. Get and check the sales order and outbound delivery from scenario *eCommerce - Sell from stock with external payment*\n2. Create customer return notification (Business object *InboundDelivery*)\n3. Post goods receipt and check the confirmed inbound delivery (Business object *ConfirmedInboundDelivery*)\n4. Get and release the customer return\n5. Get the customer invoice request (credit memo) and update the payment reference (needed to allocate the bank statement line item)\n6. Get and release the customer credit memo\n7. Check the status of the customer return\n\nOpen items created by this scenario can be cleared using scenario **eCommerce - Confirm payments using bank statements**.  \n&nbsp; \n\n\nScenario 1c: eCommerce - Confirm payments using bank statements\n---------------------------------------------------------------\n\nScenario steps:\n1. Read previous bank statement to get the last closing balance (Business object *HouseBankStatement*)\n2. Get open items to be cleared and create BAI2 bank statement file\n\t- Get the customer invoice from scenario *eCommerce - Sell from stock with external payment* and the credit memo of scenario *eCommerce - Customer return to stock* and create a suitable bank statement file\n\t- Use the closing balance of step 1 as opening balance of the bank statement file\n3. Get company house bank account (Business object *HouseBankAccount*)\n4. Get company payment file register (Business object *CompanyPaymentFileRegister*)\n5. Create incoming file using the file of step 2 (Business object *CompanyPaymentFileRegister*)\n6. Trigger file upload (Alternatively start the file upload via ByD work center view *Liquidity Management - Inbound Files*) \n\n&nbsp; \n\n\nScenario 2a: Invoice External Billing Documents - Customer invoice with external payment\n----------------------------------------------------------------------------------------\n\nScenario steps:\n1. Create and release external customer invoice with external payment information (SOAP Web Service API)\n2. Get and check the customer invoice request\n3. Get and check the customer invoice\n\nPayments in transfer created by this scenario can be pre-confirmed using scenario **Invoice External Billing Documents - Pre-confirm payments using clearing house statements** and finally confirmed using scenario **Invoice External Billing Documents - Confirm payments using bank statements**.  \n&nbsp; \n\n\nScenario 2b: Invoice External Billing Documents - Pre-confirm payments using clearing house statements\n------------------------------------------------------------------------------------------------------\n\nScenario steps:\n1. Get customer invoice (payments in transfer) and create clearing house statement file (Get the customer invoice from scenario *Invoice External Billing Documents - Customer invoice with external payment* and create a suitable clearing house statement file).  \nAlternative in scenario **Invoice External Billing Documents - Pre-confirm payments using clearing house statements**: Get payments in transfer from the payment monitor (Business object *Payment*) and create clearing house statement file.\n2. Get company payment file register (Business object *CompanyPaymentFileRegister*)\n3. Create incoming file using the file of step 1 (Business object *CompanyPaymentFileRegister*)\n4. Trigger file upload (Alternatively start the file upload via ByD work center view *Liquidity Management - Inbound Files*) \n5. Check file upload status\n\nPayments pre-confirmed by this scenario can be confirmed using scenario **Invoice External Billing Documents - Confirm payments using bank statements**.  \n&nbsp; \n\n\nScenario 2c: Invoice External Billing Documents - Confirm payments using bank statements\n----------------------------------------------------------------------------------------\n\nScenario steps:\n1. Read previous bank statement to get the last closing balance (Business object *HouseBankStatement*)\n2. Get open items to be cleared and create BAI2 bank statement file\n\t- Get the clearing house statement from scenario *Invoice External Billing Documents - Pre-confirm payments using clearing house statements* and create a suitable bank statement file\n\t- Use the closing balance of step 1 as opening balance of the bank statement file\n3. Get company house bank account (Business object *HouseBankAccount*)\n4. Get company payment file register (Business object *CompanyPaymentFileRegister*)\n5. Create incoming file using the file of step 2 (Business object *CompanyPaymentFileRegister*)\n6. Trigger file upload (Alternatively start the file upload via ByD work center view *Liquidity Management - Inbound Files*) \n7. ByD UI: Open work center view *Liquidity Management - Bank Statements*, select the bank statement created in step 6, click on *Required* in column *Postprocessing*, select *Actions* > *Import clearing house statement* and select the clearing house statement selected in step 2. Check and post the allocation.\n\n&nbsp; \n\n\nScenario 3: Create Sales Order (nested create)\n----------------------------------------------\n\nScenario steps:  \n1. Create an internet sales order (sales order) with service item\n2. Get and check the sales order\n3. Release the customer request (submit the internet order)\n4. Release the sales order\n5. Get and check the sales order\n\n&nbsp; \n\n\nScenario 4: Create Sales Order using batch\n------------------------------------------\n\nScenario steps:  \n1. Create 2 sales orders and get the sales order data in one batch request\n\n&nbsp; \n\n\nScenario 5: Create Sales Order node by node\n-------------------------------------------\n\nScenario steps:  \n1. Create sales order\n2. Add sales unit\n3. Add account (buyer party)\n4. Update pricing terms\n5. Create an sales order item\n6. Update the item product\n7. Update item quantity (item schedule line)\n8. Release the customer request (submit the internet order)\n9. Get and check the sales order\n\n&nbsp; \n\n\nScenario 6: Create Sales Order with Attachments\n-----------------------------------------------\n\nScenario steps:  \n1. Create a sales order with attachments on header and item level\n2. Get the sales order\n3. Get the item attachment\n4. Delete the item attachment\n5. Add a new item attachment\n\nRemark:  \nThe attachment binaries are Base64-encodes files (here: base64-encoded images of a document icon, icecream and shoes).\n\n&nbsp; \n\n\nScenario 7: Create Sales Order with price components (net)\n----------------------------------------------------------\n\nScenario steps:  \n1. Create sales order with net pricing\n2. Get sales order with item price components\n3. Update item tax code\n4. Create custom list price for item 10\n5. Create further item price components: product discount, surcharge, surcharge (%)\n6. Get sales order with header price components\n7. Create header price components: overall discount, freight surcharge, surcharge\n\n&nbsp; \n\n\nScenario 8: Create Sales Order with price components (gross)\n------------------------------------------------------------\n\nScenario steps:  \n1. Create sales order with gross pricing\n2. Get sales order with item price components\n3. Update item tax code\n4. Create custom gross list price for item 10\n5. Create further item gross price components: product discount, surcharge, surcharge (%)\n6. Get sales order with header price components\n7. Create header gross price components: overall discount, freight surcharge, surcharge\n\n&nbsp; \n\n\nScenario 9: Miscellaneous Samples\n---------------------------------\n\nScenario steps:  \n1. Get metadata\n2. Get codelist for currency codes\n3. Get code list for item processing type codes\n2. Get sales orders using filter parameters\n2. Get sales orders using search parameters\n3. Get sales orders using a sales order query function import\n4. Get payments (new payment monitor)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "eCommerce",
			"item": [
				{
					"name": "Sell from stock with external payment",
					"item": [
						{
							"name": "Get entity sets and CSRF-token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
										"exec": [
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Cross site request forgery token: received\", function () { pm.response.to.have.status(200); pm.response.to.have.header(\"x-csrf-token\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b5f4d9c-55db-4cb2-a6b6-ffc9e31c7d2b",
										"exec": [
											"//Initialize dynamic environment variables",
											"pm.environment.set(\"x-csrf-token\", \"\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khsalesorder",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create sales order with external payment (SOAP 1.1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "691edeb4-7bfd-4e5f-8c75-c140cf9f04a2",
										"exec": [
											"let jsonResponse = xml2Json(responseBody);",
											"pm.environment.set(\"SalesOrderID\", jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:SalesOrderBundleMaintainConfirmation_sync'].SalesOrder.ID);",
											"",
											"// Validations",
											"pm.test(\"Sales order \" + jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:SalesOrderBundleMaintainConfirmation_sync'].SalesOrder.ID + \" created\", function () ",
											"    { ",
											"        pm.response.to.have.status(200); ",
											"        pm.expect(jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:SalesOrderBundleMaintainConfirmation_sync'].Log.MaximumLogItemSeverityCode).to.be.oneOf([\"1\",\"2\"]);",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e65b165-9326-4ac2-9a90-37c0ed7a5612",
										"exec": [
											"// Set External Reference",
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"var generatedBuyerID = pm.environment.get(\"ECommercePrefix\") + todayDateTime;",
											"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
											"",
											"// Set Payment Reference ID",
											"var payRefID = pm.environment.get(\"ECommercePrefix\") + \"PAYREF-\" + todayDateTime;",
											"pm.environment.set(\"SalesOrderPaymentReferenceID\", payRefID);",
											"",
											"// Set Payment Transaction Reference ID",
											"var payTaRefID = pm.environment.get(\"ECommercePrefix\") + \"PAYTAREF-\" + todayDateTime;",
											"pm.environment.set(\"SalesOrderPaymentTransactionReferenceID\", payTaRefID);",
											"",
											"let moment = require('moment');",
											"",
											"// Set Requested Fulfillment Period (Requested Date): today + 8 days",
											"let requestedStartDate = moment().add(7,'day').toISOString().substr(0,10) + \"T00:00:00Z\";",
											"pm.environment.set(\"RequestedFulfillmentStartDate\", requestedStartDate);",
											"let requestedEndDate = moment().add(8,'day').toISOString().substr(0,10) + \"T00:00:00Z\";",
											"pm.environment.set(\"RequestedFulfillmentEndDate\", requestedEndDate);",
											"",
											"// Set PriceDateTime: today",
											"let priceDateTime = moment().add(0,'day').toISOString().substr(0,10) + \"T00:00:00Z\";",
											"pm.environment.set(\"PriceDateTime\", priceDateTime);",
											"",
											"// Set DocumentDate: today",
											"let documentDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"DocumentDate\", documentDate);",
											"",
											"// Set ValueDate: today",
											"let valueDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"ValueDate\", valueDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{CommunicationUserPW}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{CommunicationUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\" xmlns:glob1=\"http://sap.com/xi/AP/Globalization\">\n    <soapenv:Header/>\n    <soapenv:Body>\n        <glob:SalesOrderBundleMaintainRequest_sync>\n            <BasicMessageHeader>\n            \t<!-- Enter message header UUID for idem potency! -->\n                <!-- <UUID>?</UUID> -->\n            </BasicMessageHeader>\n            <SalesOrder actionCode=\"01\">\n                <ObjectNodeSenderTechnicalID>S1</ObjectNodeSenderTechnicalID>\n                <ChangeStateID></ChangeStateID>\n                <BuyerID>{{SalesOrderExternalReference}}</BuyerID>\n                <Name>Internet Order {{SalesOrderExternalReference}}</Name>\n                <!-- DataOriginTypeCode: 4 = Internet order -->\n                <DataOriginTypeCode>4</DataOriginTypeCode>\n                <ReleaseCustomerRequest>true</ReleaseCustomerRequest>\n                <ReleaseAllItemsToExecution>true</ReleaseAllItemsToExecution>\n                <SalesUnitParty actionCode=\"04\">\n                    <PartyID>{{SalesUnitID}}</PartyID>\n                </SalesUnitParty>\n                <SalesAndServiceBusinessArea actionCode=\"04\">\n                    <DistributionChannelCode>{{DistributionChannelCode}}</DistributionChannelCode>\n                </SalesAndServiceBusinessArea>\n                <AccountParty actionCode=\"04\">\n                    <PartyID>{{CustomerID}}</PartyID>\n                </AccountParty>\n                <RequestedFulfillmentPeriodPeriodTerms actionCode=\"04\">\n                    <StartDateTime timeZoneCode=\"UTC\">{{RequestedFulfillmentStartDate}}</StartDateTime>\n                    <EndDateTime timeZoneCode=\"UTC\">{{RequestedFulfillmentEndDate}}</EndDateTime>\n                </RequestedFulfillmentPeriodPeriodTerms>\n            \t<DeliveryTerms actionCode=\"04\">\n            \t\t<DeliveryPriorityCode>1</DeliveryPriorityCode>\n\t\t\t\t\t<!--<Incoterms>\n                \t\t<ClassificationCode>?</ClassificationCode>\n                \t\t<TransferLocationName>?</TransferLocationName>\n            \t\t</Incoterms>\n            \t\t<PartialDeliveryControlCode>?</PartialDeliveryControlCode>\n            \t\t<CompleteDeliveryRequestedIndicator>?</CompleteDeliveryRequestedIndicator> -->\n            \t</DeliveryTerms>\n                <PricingTerms actionCode=\"04\">\n                    <CurrencyCode>USD</CurrencyCode>\n                    <PriceDateTime timeZoneCode=\"UTC\">{{PriceDateTime}}</PriceDateTime>\n                    <GrossAmountIndicator>true</GrossAmountIndicator>\n                </PricingTerms>\n                <PaymentControl actionCode=\"01\">\n                    <PaymentProcessingCompanyID>{{CompanyID}}</PaymentProcessingCompanyID>\n                    <PaymentProcessingBusinessPartnerID>{{CustomerID}}</PaymentProcessingBusinessPartnerID>\n                    <PropertyMovementDirectionCode>2</PropertyMovementDirectionCode>\n                    <!-- PaymentFormCode: 20 = External Payment -->\n                    <PaymentFormCode>20</PaymentFormCode>\n                    <PaymentReferenceID>{{SalesOrderPaymentReferenceID}}</PaymentReferenceID>\n                    <PaymentReferenceTypeCode>5</PaymentReferenceTypeCode>\n                    <ExternalPayment actionCode=\"01\">\n                        <HouseBankAccountKeyInternalID>{{HouseBankAccountID}}</HouseBankAccountKeyInternalID>\n                        <PaymentTransactionReferenceID>{{SalesOrderPaymentTransactionReferenceID}}</PaymentTransactionReferenceID>\n                        <DocumentDate>{{DocumentDate}}</DocumentDate>\n                        <ValueDate>{{ValueDate}}</ValueDate>\n                        <Amount currencyCode=\"USD\">2250.00</Amount>\n                    </ExternalPayment>\n                </PaymentControl>\n                <Item actionCode=\"01\">\n                    <ObjectNodeSenderTechnicalID>S1-I1</ObjectNodeSenderTechnicalID>\n                    <ID>10</ID>\n                    <ProcessingTypeCode>TAN</ProcessingTypeCode>\n                    <ItemProduct actionCode=\"04\">\n                        <ProductInternalID>{{MaterialID}}</ProductInternalID>\n                    </ItemProduct>\n                    <ItemScheduleLine actionCode=\"04\">\n                        <ID>1</ID>\n                        <TypeCode>1</TypeCode>\n                        <Quantity unitCode=\"EA\">3</Quantity>\n                    </ItemScheduleLine>\n                    <PriceAndTaxCalculationItem actionCode=\"04\">\n                        <ItemMainPrice actionCode=\"04\">\n                            <Rate>\n                                <DecimalValue>750.00</DecimalValue>\n                                <CurrencyCode>USD</CurrencyCode>\n                                <BaseDecimalValue>1</BaseDecimalValue>\n                                <BaseMeasureUnitCode>EA</BaseMeasureUnitCode>\n                            </Rate>\n                        </ItemMainPrice>\n                    </PriceAndTaxCalculationItem>\n                </Item>\n            </SalesOrder>\n        </glob:SalesOrderBundleMaintainRequest_sync>\n    </soapenv:Body>\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/managesalesorderin5",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"bc",
										"srt",
										"scs",
										"sap",
										"managesalesorderin5"
									]
								}
							},
							"response": [
								{
									"name": "Create production proposal (Soap 1.1)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <glob:CreateProductionProposal>\r\n         <CreateProductionPlanningOrder>\r\n            <SequenceNumber>1</SequenceNumber>\r\n            <SupplyPlanningAreaID>P1100</SupplyPlanningAreaID>\r\n            <MaterialID>P100101</MaterialID>\r\n            <!-- <ProductRequirementSpecificationID>?</ProductRequirementSpecificationID> -->\r\n            <MaterialAvailabilityDateTime timeZoneCode=\"CET\">2019-02-05T12:00:00.0000000Z</MaterialAvailabilityDateTime>\r\n            <Quantity unitCode=\"EA\">1</Quantity>\r\n            <QuantityTypeCode>EA</QuantityTypeCode>\r\n         </CreateProductionPlanningOrder>\r\n      </glob:CreateProductionProposal>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
										},
										"url": {
											"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/manageproductionproposalin",
											"protocol": "https",
											"host": [
												"{{TenantHostname}}"
											],
											"path": [
												"sap",
												"bc",
												"srt",
												"scs",
												"sap",
												"manageproductionproposalin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "content-type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "content-length",
											"value": "505"
										},
										{
											"key": "sap-system",
											"value": "KHL"
										},
										{
											"key": "www-authenticate",
											"value": "Basic realm=\"SAP NetWeaver Application Server [KHL/171][alias]\""
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "<html>\n    <head>\n        <title>Logon Error Message</title>\n        <META http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n        <style type=\"text/css\">body { font-family:tahoma,helvetica,sans-serif;color:#333333;background-color:#FFFFFF; }td { font-family:tahoma,helvetica,sans-serif;font-size:70%;color:#333333; }h1 { font-family:tahoma,helvetica,sans-serif;font-size:160%;font-weight:bold;margin-top:15px;margin-bottom:3px;color:#003366; }h2 { font-family:verdana,helvetica,sans-serif;font-size:120%;font-style:italic;font-weight:bold;margin-top:6px;margin-bottom:6px;color:#999900; }p { font-family:tahoma,helvetica,sans-serif;color:#333333;margin-top:4px;margin-bottom:4px; }ul { font-family:tahoma,helvetica,sans-serif;color:#333333;list-style-type:square;margin-top:8px;margin-bottom:8px; }li { font-family:tahoma,helvetica,sans-serif;color:#33333;margin-top:4px; }.emphasize { color:#333333;background-color:#C8E3FF;padding:5px;}.note { color:#CC6600; }a { font-family:tahoma,helvetica,sans-serif;text-decoration:underline;color:#336699; }a:visited { color:#001166; }a:hover { text-decoration:none; }</style>\n    </head>\n    <body>\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n            <tr>\n                <td>\n                    <h1>Logon failed</h1>\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Get sales order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
											"pm.environment.set(\"SalesOrderItemID\", jsonResponse.d.results[0].Item[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Sales order data returned\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Item 10 created\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
											"pm.test(\"Sales Order consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Sales Order status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty,PaymentControl/ExternalPayment&$filter=ID eq '{{SalesOrderID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khsalesorder",
										"SalesOrderCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty,PaymentControl/ExternalPayment"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{SalesOrderID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query delivery proposal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"OutboundDeliveryRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"OutboundDeliveryRequestID\", jsonResponse.d.results[0].BaseBusinessTransactionDocumentID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Delivery proposal \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" for sales order \" + pm.environment.get(\"SalesOrderID\") + \" found\", function () { pm.response.to.have.status(200); });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca5c4394-50ed-4a15-8273-0397c44b5a57",
										"exec": [
											"// Delay and let the system complete the async. integration",
											"setTimeout(function() {}, 6000); // wait 6 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddeliveryrequest/QueryByElements?NumberOfRows='20'&SalesOrderID='{{SalesOrderID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddeliveryrequest",
										"QueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "SalesOrderID",
											"value": "'{{SalesOrderID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get delivery proposal (key access)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Get item key",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"OutboundDeliveryRequestItemObjectID\", jsonResponse.d.results.Item[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Delivery proposal \" + jsonResponse.d.results.BaseBusinessTransactionDocumentID + \" returned\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Item 10: Consistency status: Consistent\", function () { pm.expect(jsonResponse.d.results.Item[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Item 10: Order fulfilment processing status: Not Started\", function () { pm.expect(jsonResponse.d.results.Item[0].OrderFulfilmentProcessingStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddeliveryrequest/OutboundDeliveryRequestCollection('{{OutboundDeliveryRequestObjectID}}')?$format=json&$expand=ProductRecipientParty,ShipFromLocation,Item/ItemBuyerParty,Item/ItemScheduleLine/RequestedQuantity,Item/ItemScheduleLine/OpenQuantity,Item/ItemScheduleLine/ArrivalPeriod",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddeliveryrequest",
										"OutboundDeliveryRequestCollection('{{OutboundDeliveryRequestObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "ProductRecipientParty,ShipFromLocation,Item/ItemBuyerParty,Item/ItemScheduleLine/RequestedQuantity,Item/ItemScheduleLine/OpenQuantity,Item/ItemScheduleLine/ArrivalPeriod"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post goods issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"Goods issue posted for delivery proposal \" + pm.environment.get(\"OutboundDeliveryRequestID\"), function () { pm.response.to.have.status(200) });",
											"pm.test(\"Item 10: Order fulfilment processing status: \" + jsonResponse.d.results.OrderFulfilmentProcessingStatusCodeText, function () { pm.expect(jsonResponse.d.results.OrderFulfilmentProcessingStatusCode).to.eql(\"2\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4250237-33ad-4ff1-98bb-4ffb6dd02d19",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddeliveryrequest/ItemPostGoodsIssue?ObjectID='{{OutboundDeliveryRequestItemObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddeliveryrequest",
										"ItemPostGoodsIssue"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{OutboundDeliveryRequestItemObjectID}}'"
										},
										{
											"key": "TaskBasedIndicator",
											"value": "",
											"disabled": true
										},
										{
											"key": "AllowSplitIndicator",
											"value": "",
											"disabled": true
										},
										{
											"key": "AutoReleaseOutboundDelivery",
											"value": "true",
											"disabled": true
										},
										{
											"key": "SplitByDeliveryPriorityCodeIndicator",
											"value": "",
											"disabled": true
										},
										{
											"key": "SplitByOrderIndicator",
											"value": "",
											"disabled": true
										},
										{
											"key": "SplitByShippingOrPickupDateTimeIndicator",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query outbound delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"OutboundDeliveryObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"OutboundDeliveryID\", jsonResponse.d.results[0].ID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Outbound delivery \" + jsonResponse.d.results[0].ID + \" for sales order \" + pm.environment.get(\"SalesOrderID\") + \" found\", function () { pm.response.to.have.status(200); });",
											"pm.test(\"Consistency status: \" + jsonResponse.d.results[0].ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Release status: \" + jsonResponse.d.results[0].ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].ReleaseStatusCode).to.eql(\"1\") });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddelivery/QueryByElements?NumberOfRows='20'&OutboundDeliveryRequestID='{{OutboundDeliveryRequestID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddelivery",
										"QueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "OutboundDeliveryRequestID",
											"value": "'{{OutboundDeliveryRequestID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get outbound delivery (key access)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Get item key",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"OutboundDeliveryObjectID\", jsonResponse.d.results.ObjectID);",
											"pm.environment.set(\"OutboundDeliveryID\", jsonResponse.d.results.ID);",
											"",
											"// Validations",
											"pm.test(\"Outbound delivery \" + jsonResponse.d.results.ID + \" retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Consistency status: \" + jsonResponse.d.results.ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddelivery/OutboundDeliveryCollection('{{OutboundDeliveryObjectID}}')?$format=json&$expand=BuyerParty,SellerParty,FreightForwarderParty,ArrivalPeriod,ShippingPeriod,GrossVolumeMeasure,GrossWeightMeasure,ProductRecipientParty/ProductRecipientDisplayName,ProductRecipientParty/ProductRecipientFormattedAddress,ShipFromLocation,PickupPeriod,Item/ItemDeliveryQuantity,Item/ItemLogisticsRequestResponsibleParty,Item/ItemSalesOrderReference",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddelivery",
										"OutboundDeliveryCollection('{{OutboundDeliveryObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BuyerParty,SellerParty,FreightForwarderParty,ArrivalPeriod,ShippingPeriod,GrossVolumeMeasure,GrossWeightMeasure,ProductRecipientParty/ProductRecipientDisplayName,ProductRecipientParty/ProductRecipientFormattedAddress,ShipFromLocation,PickupPeriod,Item/ItemDeliveryQuantity,Item/ItemLogisticsRequestResponsibleParty,Item/ItemSalesOrderReference"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release outbound delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"Outbound delivery \" + jsonResponse.d.results.ID + \" released\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4250237-33ad-4ff1-98bb-4ffb6dd02d19",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddelivery/Release?ObjectID='{{OutboundDeliveryObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddelivery",
										"Release"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{OutboundDeliveryObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Consistency status: \" + jsonResponse.d.results[0].ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice request item 1: Not Invoiced\", function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546de23c-d88a-4193-ac90-d23d098e2b99",
										"exec": [
											"// Delay release of customer invoice request and let the system complete the async. integration between sales order and customer invoicing",
											"setTimeout(function() {}, 6000); // wait 6 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$expand=Item&$filter=BaseBusinessTransactionDocumentID eq '{{OutboundDeliveryID}}' and BaseBusinessTransactionDocumentTypeCode eq '73'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "Item"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{OutboundDeliveryID}}' and BaseBusinessTransactionDocumentTypeCode eq '73'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Customer Invoice request \" + jsonResponse.d.results.BaseBusinessTransactionDocumentID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d693a90-cc3f-4ca6-af65-cec87c532376",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CreateCustomerInvoices?ObjectID='{{CustomerInvoiceRequestObjectID}}'&AutomaticReleaseAllowedIndicator=true",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CreateCustomerInvoices"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{CustomerInvoiceRequestObjectID}}'"
										},
										{
											"key": "AutomaticReleaseAllowedIndicator",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice request and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice request consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Item 1: Invoicing status: \" + jsonResponse.d.results[0].Item[0].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$expand=CashDiscountTerms,BuyerPartyName,BuyerPartyFormattedAddress,EmployeeResponsibleName,SalesUnitParty,BillToPartyName,Item&$filter=BaseBusinessTransactionDocumentID eq '{{OutboundDeliveryID}}' and BaseBusinessTransactionDocumentTypeCode eq '73'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "CashDiscountTerms,BuyerPartyName,BuyerPartyFormattedAddress,EmployeeResponsibleName,SalesUnitParty,BillToPartyName,Item"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{OutboundDeliveryID}}' and BaseBusinessTransactionDocumentTypeCode eq '73'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query customer invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"CustomerInvoiceObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Customer invoice consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Customer invoice status: Not released\", function () { pm.expect(jsonResponse.d.results[0].ReleaseStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceQueryByElements2?NumberOfRows='20'&ItemBusinessTransactionDocumentReference_ID='{{OutboundDeliveryID}}'&ItemBusinessTransactionDocumentReference_TypeCode='73'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceQueryByElements2"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_ID",
											"value": "'{{OutboundDeliveryID}}'"
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_TypeCode",
											"value": "'73'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release customer invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67586dee-65df-4f49-ad4b-bf4ca694e3d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/Release?ObjectID='{{CustomerInvoiceObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"Release"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{CustomerInvoiceObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice (key access) and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')?$format=json&$expand=BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sales order and check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
											"pm.environment.set(\"SalesOrderItemID\", jsonResponse.d.results[0].Item[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Delivery status: \" + jsonResponse.d.results[0].DeliveryStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].DeliveryStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoicing status: \" + jsonResponse.d.results[0].InvoiceStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].InvoiceStatusCode).to.eql(\"3\") });",
											"pm.test(\"Lifecycle status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"3\") });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e99ae63-a267-44da-a0d7-57459558a926",
										"exec": [
											"// Delay and let the system complete the async. integration ",
											"setTimeout(function() {}, 5000); // wait 5 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty&$filter=ID eq '{{SalesOrderID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khsalesorder",
										"SalesOrderCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{SalesOrderID}}'"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer return to stock",
					"item": [
						{
							"name": "Get sales order from scenario \"Sell from Stock with External Payment\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
											"pm.environment.set(\"SalesOrderItemID\", jsonResponse.d.results[0].Item[0].ID);",
											"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
											"pm.environment.set(\"SalesOrderItemUUID\", jsonResponse.d.results[0].Item[0].UUID);",
											"",
											"// Validations",
											"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Item: \" + jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].Quantity + \" \" + jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].unitCodeText + \" \" + jsonResponse.d.results[0].Item[0].ItemProduct.ProductID, function () ",
											"    { ",
											"        pm.expect(jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].Quantity).to.eql(\"3.00000000000000\"); ",
											"        pm.expect(jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].unitCode).to.eql(\"EA\");",
											"        pm.expect(jsonResponse.d.results[0].Item[0].ItemProduct.ProductID).to.eql(pm.environment.get(\"MaterialID\"));",
											"    });",
											"pm.test(\"Delivery status: \" + jsonResponse.d.results[0].DeliveryStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].DeliveryStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoicing status: \" + jsonResponse.d.results[0].InvoiceStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].InvoiceStatusCode).to.eql(\"3\") });",
											"pm.test(\"Lifecycle status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e99ae63-a267-44da-a0d7-57459558a926",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty&$filter=ID eq '{{SalesOrderID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khsalesorder",
										"SalesOrderCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,RequestedFulfillmentPeriod,Item/ItemProductRecipientParty"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{SalesOrderID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query outbound delivery  from scenario \"Sell from Stock with External Payment\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"OutboundDeliveryObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"OutboundDeliveryID\", jsonResponse.d.results[0].ID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Outbound delivery \" + jsonResponse.d.results[0].ID + \" for sales order \" + pm.environment.get(\"SalesOrderID\") + \" found\", function () { pm.response.to.have.status(200); });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddelivery/QueryByElements?NumberOfRows='20'&SalesOrderID='{{SalesOrderID}}'&SalesOrderItemID='{{SalesOrderItemID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddelivery",
										"QueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "SalesOrderID",
											"value": "'{{SalesOrderID}}'"
										},
										{
											"key": "SalesOrderItemID",
											"value": "'{{SalesOrderItemID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get outbound delivery (key access)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Get item key",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"OutboundDeliveryObjectID\", jsonResponse.d.results.ObjectID);",
											"pm.environment.set(\"OutboundDeliveryID\", jsonResponse.d.results.ID);",
											"pm.environment.set(\"OutboundDeliveryUUID\", jsonResponse.d.results.UUID);",
											"pm.environment.set(\"OutboundDeliveryItemID\", jsonResponse.d.results.Item[0].ID);",
											"pm.environment.set(\"OutboundDeliveryItemUUID\", jsonResponse.d.results.Item[0].UUID);",
											"",
											"// Validations",
											"pm.test(\"Outbound delivery \" + jsonResponse.d.results.ID + \" retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khoutbounddelivery/OutboundDeliveryCollection('{{OutboundDeliveryObjectID}}')?$format=json&$expand=BuyerParty,SellerParty,FreightForwarderParty,ArrivalPeriod,ShippingPeriod,GrossVolumeMeasure,GrossWeightMeasure,ProductRecipientParty/ProductRecipientDisplayName,ProductRecipientParty/ProductRecipientFormattedAddress,ShipFromLocation,PickupPeriod,Item/ItemDeliveryQuantity,Item/ItemLogisticsRequestResponsibleParty,Item/ItemSalesOrderReference",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khoutbounddelivery",
										"OutboundDeliveryCollection('{{OutboundDeliveryObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BuyerParty,SellerParty,FreightForwarderParty,ArrivalPeriod,ShippingPeriod,GrossVolumeMeasure,GrossWeightMeasure,ProductRecipientParty/ProductRecipientDisplayName,ProductRecipientParty/ProductRecipientFormattedAddress,ShipFromLocation,PickupPeriod,Item/ItemDeliveryQuantity,Item/ItemLogisticsRequestResponsibleParty,Item/ItemSalesOrderReference"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer return notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"InboundDeliveryNotificationObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer return notification \" + jsonResponse.d.results.ID + \" created\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"Customer return notification status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"1\") });",
											"pm.test(\"Customer return notification consistency status: \" + jsonResponse.d.results.ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											"// Set inbound delivery notification ID of pattern R-CRN-<SalesOrderID-ItemID>-DateTime",
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"let inboundDeliveryNotifID = pm.environment.get(\"ECommercePrefix\") + \"CRN-\" + pm.environment.get(\"SalesOrderID\") + \"-\" + pm.environment.get(\"SalesOrderItemID\") + \"-\" + todayDateTime;",
											"pm.environment.set(\"InboundDeliveryNotificationID\", inboundDeliveryNotifID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ID\": \"{{InboundDeliveryNotificationID}}\",\n\t\"ProcessingTypeCode\": \"CRD\",\n\t\"Item\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"TypeCode\": \"17\",\n\t\t\t\t\"ProductID\": \"{{MaterialID}}\",\n\t\t\t\t\"CustomerReturnReasonCode\": \"14\",\n\t\t\t\t\"ReturnFollowupActivityCode\": \"1\",\n\t\t\t\t\"ItemQuantity\": \n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"UnitCode\": \"EA\",\n\t\t\t\t\t\t\t\"QuantityRoleCode\": \"18\",\n\t\t\t\t\t\t\t\"QuantityTypeCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\"ItemOutboundDeliveryReference\": \n\t\t\t\t\t{\n                \t\t\"ID\": \"{{OutboundDeliveryID}}\",\n                        \"ItemID\": \"{{OutboundDeliveryItemID}}\",\n                        \"ItemTypeCode\": \"14\",\n                        \"ItemUUID\": \"{{OutboundDeliveryItemUUID}}\",\n                        \"TypeCode\": \"73\",\n                        \"UUID\": \"{{OutboundDeliveryUUID}}\",\n                        \"RelationshipRoleCode\": \"1\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemSalesOrderReference\": \n\t\t\t\t\t{\n\t\t\t\t\t\t\"ID\": \"{{SalesOrderID}}\",\n\t\t\t\t\t\t\"ItemID\": \"{{SalesOrderItemID}}\",\n\t\t\t\t\t\t\"ItemTypeCode\": \"28\",\n\t\t\t\t\t\t\"ItemUUID\": \"{{SalesOrderItemUUID}}\",\n\t\t\t\t\t\t\"TypeCode\": \"114\",\n\t\t\t\t\t\t\"UUID\": \"{{SalesOrderUUID}}\",\n\t\t\t\t\t\t\"RelationshipRoleCode\": \"15\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemSellerParty\": \n\t\t\t\t\t{\n\t\t\t\t\t\t\"PartyID\": \"{{CompanyID}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemBuyerParty\": \n\t\t\t\t\t{\n\t\t\t\t\t\t\"PartyID\": \"{{CustomerID}}\"\n\t\t\t\t\t}\n\t\t\t}\n\t\t]\n}    \t"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khinbounddelivery/InboundDeliveryCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khinbounddelivery",
										"InboundDeliveryCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer return notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"InboundDeliveryNotificationObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer return notification retrieved: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khinbounddelivery/InboundDeliveryCollection?$format=json&$expand=Item,Item/ItemQuantity,Item/ItemSalesOrderReference,Item/ItemOutboundDeliveryReference,ShipToLocation,SenderParty,ShipToParty,Item/ItemSellerParty,Item/ItemBuyerParty&$filter=ID eq '{{InboundDeliveryNotificationID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khinbounddelivery",
										"InboundDeliveryCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "Item,Item/ItemQuantity,Item/ItemSalesOrderReference,Item/ItemOutboundDeliveryReference,ShipToLocation,SenderParty,ShipToParty,Item/ItemSellerParty,Item/ItemBuyerParty"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{InboundDeliveryNotificationID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post goods receipt",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Goods receipt posted\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Inbound delivery notification released\", function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											"pm.test(\"Inbound delivery notification consistent\", function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a3f7470-2b39-44aa-8f5f-4ef0f66df2cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khinbounddelivery/PostGoodsReceipt?ObjectID='{{InboundDeliveryNotificationObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khinbounddelivery",
										"PostGoodsReceipt"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{InboundDeliveryNotificationObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query confirmed inbound delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"ConfirmedInboundDeliveryObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"ConfirmedInboundDeliveryID\", jsonResponse.d.results[0].ID);",
											"",
											"// Validations",
											"pm.test(\"Confirmed inbound delivery \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4089e172-5058-427e-bfb0-48b581a30fa8",
										"exec": [
											"// Delay and let the system complete the async. process integrations",
											"setTimeout(function() {}, 3000); // wait 3 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khconfirmedinbounddelivery/QueryByElements?NumberOfRows='20'&InboundDeliveryID='{{InboundDeliveryNotificationID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khconfirmedinbounddelivery",
										"QueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "InboundDeliveryID",
											"value": "'{{InboundDeliveryNotificationID}}'"
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_TypeCode",
											"value": "'114'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get confirmed inbound delivery (key access)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Confirmed inbound delivery \" + jsonResponse.d.results.ID + \" returned\", function () { pm.response.to.have.status(200) });",
											"//pm.test(\"Delivery status: \" + jsonResponse.d.results.DeliveryProcessingStatusCodeText, function () { pm.response.to.have.status(200) });",
											"//pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.response.to.have.status(200) });",
											"//pm.test(\"Consistency status: \" + jsonResponse.d.results.ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Delivery status: Finished\", function () { pm.expect(jsonResponse.d.results.DeliveryProcessingStatusCode).to.eql(\"3\") });",
											"pm.test(\"Release status: Released\", function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											"pm.test(\"Consistency status: Consistent\", function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khconfirmedinbounddelivery/ConfirmedInboundDeliveryCollection('{{ConfirmedInboundDeliveryObjectID}}')?$format=json&$expand=InboundDeliveryNotification,SenderParty,ShipToParty,ShipToLocation,Date,ArrivalPeriod,Item/DeliveryQuantity,Item/PurchaseOrderReference",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khconfirmedinbounddelivery",
										"ConfirmedInboundDeliveryCollection('{{ConfirmedInboundDeliveryObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "InboundDeliveryNotification,SenderParty,ShipToParty,ShipToLocation,Date,ArrivalPeriod,Item/DeliveryQuantity,Item/PurchaseOrderReference"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query customer return",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerReturnObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerReturnID\", jsonResponse.d.results[0].ID);",
											"",
											"// Validations",
											"pm.test(\"Customer return \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4089e172-5058-427e-bfb0-48b581a30fa8",
										"exec": [
											"// Delay and let the system complete the async. process integrations",
											"setTimeout(function() {}, 6000); // wait 6 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerreturn/QueryByElements?NumberOfRows='20'&BusinessTransactionDocumentReferenceID='{{InboundDeliveryNotificationID}}'&BusinessTransactionDocumentReferenceTypeCode='58'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerreturn",
										"QueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "BusinessTransactionDocumentReferenceID",
											"value": "'{{InboundDeliveryNotificationID}}'"
										},
										{
											"key": "BusinessTransactionDocumentReferenceTypeCode",
											"value": "'58'",
											"description": "Customer return notification"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer return",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"let jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerReturnObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerReturnID\", jsonResponse.d.results[0].ID);",
											"",
											"// Validations",
											"pm.test(\"Customer return retrieved: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											"pm.test(\"Lifecycle status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"2\") });",
											"pm.test(\"Inbound status: \" + jsonResponse.d.results[0].InboundStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].InboundStatusCode).to.eql(\"3\") });",
											"pm.test(\"Credit memo status: \" + jsonResponse.d.results[0].CreditMemoStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].CreditMemoStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerreturn/CustomerReturnCollection?$format=json&$expand=SalesUnitParty/SalesUnitPartyName,SalesAndServiceBusinessArea,EmployeeResponsibleParty/EmployeeResponsiblePartyName,BuyerParty/BuyerPartyName,BillToParty/BillToPartyName,PaymentControl/ExternalPayment,BusinessTransactionDocumentReference,Item/PlannedQuantity&$filter=ID eq '{{CustomerReturnID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerreturn",
										"CustomerReturnCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "SalesUnitParty/SalesUnitPartyName,SalesAndServiceBusinessArea,EmployeeResponsibleParty/EmployeeResponsiblePartyName,BuyerParty/BuyerPartyName,BillToParty/BillToPartyName,PaymentControl/ExternalPayment,BusinessTransactionDocumentReference,Item/PlannedQuantity"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{CustomerReturnID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release customer return",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Customer return released\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Lifecycle status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"pm.test(\"Approval status: \" + jsonResponse.d.results.ApprovalStatusCodeText, function () { pm.expect(jsonResponse.d.results.ApprovalStatusCode).to.eql(\"2\") });",
											"pm.test(\"Inbound status: \" + jsonResponse.d.results.InboundStatusCodeText, function () { pm.expect(jsonResponse.d.results.InboundStatusCode).to.eql(\"3\") });",
											"pm.test(\"Credit memo status: \" + jsonResponse.d.results.CreditMemoStatusCodeText, function () { pm.expect(jsonResponse.d.results.CreditMemoStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a3f7470-2b39-44aa-8f5f-4ef0f66df2cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerreturn/SubmitForApproval?ObjectID='{{CustomerReturnObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerreturn",
										"SubmitForApproval"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{CustomerReturnObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerInvoiceRequestID\", jsonResponse.d.results[0].BaseBusinessTransactionDocumentID);",
											"pm.environment.set(\"PaymentControlObjectID\", jsonResponse.d.results[0].PaymentControl.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice request consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice request item 1: Not Invoiced\", function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546de23c-d88a-4193-ac90-d23d098e2b99",
										"exec": [
											"// Delay release of customer invoice request and let the system complete the async. integration between sales order and customer invoicing",
											"setTimeout(function() {}, 6000); // wait 6 sec"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$expand=Item/ItemBusinessTransactionDocumentReference,PaymentControl/PaymentControlExternalPayment&$filter=BaseBusinessTransactionDocumentID eq '{{CustomerReturnID}}' and BaseBusinessTransactionDocumentTypeCode eq '32'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "Item/ItemBusinessTransactionDocumentReference,PaymentControl/PaymentControlExternalPayment"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{CustomerReturnID}}' and BaseBusinessTransactionDocumentTypeCode eq '32'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update payment control",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f6d5ad4-b168-4662-b4f9-8e2bfcf53877",
										"exec": [
											"// Validations",
											"pm.test(\"Payment control updated\", function () { pm.response.to.have.status(204) });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5abab81-f93e-4071-98f6-9f16f29b5651",
										"exec": [
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"",
											"// Set Payment Reference ID",
											"var payRefID = pm.environment.get(\"ECommercePrefix\") + \"PAYREF-\" + todayDateTime;",
											"pm.environment.set(\"CustomerReturnPaymentReferenceID\", payRefID);",
											"",
											"// Set Payment Transaction Reference ID",
											"var payTaRefID = pm.environment.get(\"ECommercePrefix\") + \"PAYTAREF-\" + todayDateTime;",
											"pm.environment.set(\"CustomerReturnPaymentTransactionReferenceID\", payTaRefID);",
											"",
											"let moment = require('moment');",
											"",
											"// Set DocumentDate: today",
											"let documentDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"DocumentDate\", documentDate);",
											"",
											"// Set ValueDate: today",
											"let valueDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"ValueDate\", valueDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ObjectID\":\"{{PaymentControlObjectID}}\",\n\t\"ParentObjectID\": \"{{CustomerInvoiceRequestObjectID}}\",\n\t\"PaymentReferenceID\": \"{{CustomerReturnPaymentReferenceID}}\"\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/PaymentControlCollection('{{PaymentControlObjectID}}')",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"PaymentControlCollection('{{PaymentControlObjectID}}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Release customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Customer Invoice request \" + jsonResponse.d.results.BaseBusinessTransactionDocumentID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d693a90-cc3f-4ca6-af65-cec87c532376",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CreateCustomerInvoices?ObjectID='{{CustomerInvoiceRequestObjectID}}'&AutomaticReleaseAllowedIndicator=true",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CreateCustomerInvoices"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{CustomerInvoiceRequestObjectID}}'"
										},
										{
											"key": "AutomaticReleaseAllowedIndicator",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice request and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice request consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Item 1: Invoicing status: \" + jsonResponse.d.results[0].Item[0].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$filter=BaseBusinessTransactionDocumentID eq '{{CustomerReturnID}}' and BaseBusinessTransactionDocumentTypeCode eq '32'&$expand=CashDiscountTerms,BuyerPartyName,BuyerPartyFormattedAddress,EmployeeResponsibleName,SalesUnitParty,BillToPartyName,Item,PaymentControl/PaymentControlExternalPayment",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{CustomerReturnID}}' and BaseBusinessTransactionDocumentTypeCode eq '32'"
										},
										{
											"key": "$expand",
											"value": "CashDiscountTerms,BuyerPartyName,BuyerPartyFormattedAddress,EmployeeResponsibleName,SalesUnitParty,BillToPartyName,Item,PaymentControl/PaymentControlExternalPayment"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query customer credit memo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"CustomerInvoiceObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Customer invoice consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Customer invoice status: Not released\", function () { pm.expect(jsonResponse.d.results[0].ReleaseStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceQueryByElements2?NumberOfRows='20'&ItemBusinessTransactionDocumentReference_ID='{{CustomerReturnID}}'&ItemBusinessTransactionDocumentReference_TypeCode='32'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceQueryByElements2"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_ID",
											"value": "'{{CustomerReturnID}}'"
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_TypeCode",
											"value": "'32'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release customer credit memo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"// Validations",
											"var jsonResponse = pm.response.json();",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67586dee-65df-4f49-ad4b-bf4ca694e3d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/Release?ObjectID='{{CustomerInvoiceObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"Release"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{CustomerInvoiceObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer credit memo and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" released\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')?$format=json&$expand=BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer return and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"let jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerReturnObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerReturnID\", jsonResponse.d.results[0].ID);",
											"",
											"// Validations",
											"pm.test(\"Customer return retrieved: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											"pm.test(\"Lifecycle status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"3\") });",
											"pm.test(\"Inbound status: \" + jsonResponse.d.results[0].InboundStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].InboundStatusCode).to.eql(\"3\") });",
											"pm.test(\"Credit memo status: \" + jsonResponse.d.results[0].CreditMemoStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].CreditMemoStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerreturn/CustomerReturnCollection?$format=json&$expand=SalesUnitParty/SalesUnitPartyName,SalesAndServiceBusinessArea,EmployeeResponsibleParty/EmployeeResponsiblePartyName,BuyerParty/BuyerPartyName,BillToParty/BillToPartyName,PaymentControl,BusinessTransactionDocumentReference,Item/PlannedQuantity&$filter=ID eq '{{CustomerReturnID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerreturn",
										"CustomerReturnCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "SalesUnitParty/SalesUnitPartyName,SalesAndServiceBusinessArea,EmployeeResponsibleParty/EmployeeResponsiblePartyName,BuyerParty/BuyerPartyName,BillToParty/BillToPartyName,PaymentControl,BusinessTransactionDocumentReference,Item/PlannedQuantity"
										},
										{
											"key": "$filter",
											"value": "ID eq '{{CustomerReturnID}}'"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm payments using bank statements",
					"item": [
						{
							"name": "Get previous bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement found; Bank statement ID: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											"",
											"// Persist data from last bank statement",
											"for (let index = 0; index < 1; index++)",
											"{ ",
											"    pm.environment.set(\"LastBankStatementID\", jsonResponse.d.results[0].ID);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceAmount\", jsonResponse.d.results[0].ClosingBalanceAmount);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", jsonResponse.d.results[0].CurrencyCode);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											"// Initialize variables of the last bank statement",
											"// These values apply if no bank statement has been posted before",
											"pm.environment.unset(\"LastBankStatementID\");",
											"pm.environment.set(\"LastBankStatementClosingBalanceAmount\", 0);",
											"pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", \"USD\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						},
						{
							"name": "Get customer invoice/credit memo and create bank statement file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Sales order: customer invoice \" + jsonResponse.d.results[0].CustomerInvoice.ID + \" found\", function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results[0].CustomerInvoice.ReleaseStatusCodeText, function() { pm.expect(jsonResponse.d.results[0].CustomerInvoice.ReleaseStatusCode).to.eql(\"3\") });",
											"pm.test(\"Total amount: \" + jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmount + \" \" + jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmountCurrencyCode, function() { pm.expect(jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmountCurrencyCode).to.eql(\"USD\") });",
											"pm.test(\"Customer return: credit memo \" + jsonResponse.d.results[1].CustomerInvoice.ID + \" found\", function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results[1].CustomerInvoice.ReleaseStatusCodeText, function() { pm.expect(jsonResponse.d.results[1].CustomerInvoice.ReleaseStatusCode).to.eql(\"3\") });",
											"pm.test(\"Total amount: \" + jsonResponse.d.results[1].CustomerInvoice.TotalGrossAmount + \" \" + jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmountCurrencyCode, function() { pm.expect(jsonResponse.d.results[1].CustomerInvoice.TotalGrossAmountCurrencyCode).to.eql(\"USD\") });",
											"",
											"",
											"// Create BAI2 bank statement file from open items",
											"let writer = eval(globals.BAI2StmtWriter);",
											"writer.StartNewStatement();",
											"",
											"// Loop open items and create bank statement lines",
											"var amountOnBankStatement = 0.00;",
											"console.log(\"- Start loop -\");",
											"for (let index = 0; index < 2; index++) {",
											"    amountOnBankStatement = jsonResponse.d.results[index].CustomerInvoice.TotalGrossAmount;",
											"",
											"    console.log(\"Open item index: \" + index + \" | Amount: \" + jsonResponse.d.results[index].CustomerInvoice.TotalGrossAmount);",
											"    console.log(\"External reference: \" + jsonResponse.d.results[index].CustomerInvoice.ReferenceBusinessTransactionDocumentID + \" | Customer name: \" + jsonResponse.d.results[index].CustomerInvoice.BuyerParty.BuyerPartyName[0].FormattedName);",
											"",
											"    //Add bank statement line items (12.50, \"R-20190430114408\", \"Luxury Heating & Cooling Co\")",
											"    //Transaction codes: 195 incoming cash transfer, 495 outgoing cash transfer, 399 miscellaneous credit, 699 miscellaneous debit",
											"    // 1. External payment of sales order, allocation by external payment transaction reference ID",
											"    if (amountOnBankStatement >= 0) {",
											"        writer.AddIncomingTransaction(\"399\", amountOnBankStatement, jsonResponse.d.results[index].ExternalPayment[0].PaymentTransactionReferenceID, jsonResponse.d.results[index].CustomerInvoice.BuyerParty.BuyerPartyName[0].FormattedName);",
											"    }",
											"    // 2. Open item of customer return credit memo, allocation by credit memo external reference",
											"    if (amountOnBankStatement < 0) { ",
											"        writer.AddOutgoingTransaction(\"699\", amountOnBankStatement, jsonResponse.d.results[index].CustomerInvoice.ReferenceBusinessTransactionDocumentID, jsonResponse.d.results[index].CustomerInvoice.BuyerParty.BuyerPartyName[0].FormattedName);",
											"    }",
											"}",
											"console.log(\"- End loop -\");",
											"",
											"",
											"// Set bank statement date and convert date to BAI2 format YYMMDD",
											"var moment = require('moment');",
											"var today = moment.utc(pm.environment.get(\"$timestamp\"));",
											"console.log(\"Today's date: \" + today);",
											"console.log(\"Today's date (ISO): \" + today.toISOString());",
											"var year = (today.get('year') - 2000).toString();",
											"var month = (today.get('month') + 1).toString();",
											"if (month.length == 1) {",
											"    month = \"0\" + month;",
											"}",
											"var day = today.get('date').toString();",
											"if (day.length == 1) {",
											"    day = \"0\" + day;",
											"}",
											"var bankStatementDate = year + month + day;",
											"console.log(\"Bank statement date: \" + bankStatementDate);",
											"pm.environment.set(\"BankStatementDate\", bankStatementDate);",
											"",
											"// writer.Finalize = function Finalize(bankAccountId, stmtDate \"181211\", openingBalance 222.23)",
											"pm.environment.set(\"BAI2-BankStatementFile\", writer.Finalize(pm.environment.get(\"HouseBankAccountID\"), pm.environment.get(\"HouseBankRoutingID\"), bankStatementDate, parseFloat(pm.environment.get(\"LastBankStatementClosingBalanceAmount\"))));",
											"",
											"console.log(\"BAI2-file:\");",
											"console.log(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"",
											"// Base64 encode the bank statement file string",
											"var cryptoJS = require(\"crypto-js\");",
											"var rawContent = cryptoJS.enc.Utf8.parse(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"var base64Content = cryptoJS.enc.Base64.stringify(rawContent);",
											"pm.environment.set(\"BAI2-BankStatementFile-base64\", base64Content);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81136713-2039-47d6-8e37-0e7919c4abde",
										"exec": [
											"// Functions to create BAI2 bank statement file",
											"postman.setGlobalVariable(\"BAI2StmtWriter\", function BAI2StmtWriter() {",
											"    let writer = {};",
											"",
											"    writer.StartNewStatement = function StartNewStatement() {",
											"        //initializing variables",
											"        pm.globals.set(\"BAI2Transactions\", \"\");",
											"        pm.globals.set(\"BAI2CounterAccountLines\", 0);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", 0);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", 0);",
											"        pm.globals.set(\"BAI2TotalsDebit\", 0);",
											"        pm.globals.set(\"BAI2TotalsCredit\", 0);",
											"    };",
											"    ",
											"    writer.AddIncomingTransaction = function AddIncomingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],0,0022640118XF,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] ORIG CO NAME=[customer]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[customer]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsCredit\", pm.globals.get(\"BAI2TotalsCredit\") + amount * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", pm.globals.get(\"BAI2CounterCreditLines\") + 1);",
											"    };",
											"",
											"    writer.AddOutgoingTransaction = function AddOutgoingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],V,[date],,,,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] BENEFICIARY=[bpName]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[bpName]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsDebit\", pm.globals.get(\"BAI2TotalsDebit\") + Math.abs(amount) * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", pm.globals.get(\"BAI2CounterDebitLines\") + 1);",
											"    };",
											"",
											"    writer.Finalize = function Finalize(bankAccountId, bankRoutingId, stmtDate, openingBalance) {",
											"        ",
											"        //add templates for missing templates and trailers",
											"        var stmt = \"01,10000002,SABBYD,[date],[time],[fileID],,,2/\\r\\n\" + ",
											"                   \"02,SAPBYD,[bankRoutingId],1,[date],[time],USD,/\\r\\n\" + ",
											"                   \"03,[bankAccId],USD,010,[openingBalance],,,015,[closingBalance],,,/\\r\\n\" + ",
											"                   \"88,100,[totalCredit],[lineCountCredit],,400,[totalDebit],[lineCountDebit],/\\r\\n\" + ",
											"                   pm.globals.get(\"BAI2Transactions\") + ",
											"                   \"49,0,[lineCountAccountLvl]/\\r\\n\" + ",
											"                   \"98,0,1,[lineCountGroupLvl]/\\r\\n\" + ",
											"                   \"99,0,1,[lineCountFileLvl]/\";",
											"        ",
											"        //take some variables local for better readibility",
											"        let totalCredit = pm.globals.get(\"BAI2TotalsCredit\");",
											"        let totalDebit = pm.globals.get(\"BAI2TotalsDebit\");",
											"        let lineCountAccountLvl = pm.globals.get(\"BAI2CounterAccountLines\");",
											"    ",
											"        //fill in values",
											"        stmt = stmt.replace(/(\\[date\\])/g, stmtDate);",
											"        stmt = stmt.replace(/(\\[time\\])/g, \"0730\"); //fix at first",
											"        stmt = stmt.replace(\"[fileID]\", \"1\"); //fix at first",
											"        stmt = stmt.replace(\"[bankRoutingId]\", bankRoutingId);",
											"        stmt = stmt.replace(\"[bankAccId]\", bankAccountId);",
											"        stmt = stmt.replace(\"[openingBalance]\", (Math.round(openingBalance * 100)).toString());",
											"        stmt = stmt.replace(\"[closingBalance]\", (Math.round((openingBalance * 100) + totalCredit - totalDebit)).toString());",
											"        stmt = stmt.replace(\"[totalCredit]\", Math.abs(totalCredit));",
											"        stmt = stmt.replace(\"[lineCountCredit]\", pm.globals.get(\"BAI2CounterCreditLines\"));",
											"        stmt = stmt.replace(\"[totalDebit]\", Math.abs(totalDebit));",
											"        stmt = stmt.replace(\"[lineCountDebit]\", pm.globals.get(\"BAI2CounterDebitLines\"));",
											"        stmt = stmt.replace(\"[lineCountAccountLvl]\", lineCountAccountLvl + 2); // plus header and trailer",
											"        stmt = stmt.replace(\"[lineCountGroupLvl]\", lineCountAccountLvl + 4);",
											"        stmt = stmt.replace(\"[lineCountFileLvl]\", lineCountAccountLvl + 6);",
											"    ",
											"        //clean-up",
											"        pm.globals.unset(\"BAI2Transactions\");",
											"        pm.globals.unset(\"BAI2CounterFileLines\");",
											"        pm.globals.unset(\"BAI2CounterGroupLines\");",
											"        pm.globals.unset(\"BAI2CounterAccountLines\");",
											"        pm.globals.unset(\"BAI2CounterDebitLines\");",
											"        pm.globals.unset(\"BAI2CounterCreditLines\");",
											"        pm.globals.unset(\"BAI2TotalsDebit\");",
											"        pm.globals.unset(\"BAI2TotalsCredit\");",
											"        ",
											"        //return file",
											"        return stmt;",
											"",
											"    };",
											"",
											"    return writer;",
											"",
											"} + '; BAI2StmtWriter();');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/PaymentControlCollection?$format=json&$filter=PaymentReferenceID eq '{{SalesOrderPaymentReferenceID}}' or PaymentReferenceID eq '{{CustomerReturnPaymentReferenceID}}'&$expand=CustomerInvoice/BusinessTransactionDocumentReference,ExternalPayment,CustomerInvoice/BuyerParty/BuyerPartyName",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"PaymentControlCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "PaymentReferenceID eq '{{SalesOrderPaymentReferenceID}}' or PaymentReferenceID eq '{{CustomerReturnPaymentReferenceID}}'"
										},
										{
											"key": "$expand",
											"value": "CustomerInvoice/BusinessTransactionDocumentReference,ExternalPayment,CustomerInvoice/BuyerParty/BuyerPartyName"
										},
										{
											"key": "$select",
											"value": "PaymentReferenceID,CustomerInvoice/ID,CustomerInvoice/ReferenceBusinessTransactionDocumentID,CustomerInvoice/ReleaseStatusCode,CustomerInvoice/ReleaseStatusCodeText,ExternalPayment/PaymentTransactionReferenceID ",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"HouseBankUUID\", jsonResponse.d.results[0].HouseBankUUID);",
											"pm.environment.set(\"HouseBankAccountObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"House bank account found \" + jsonResponse.d.results[0].BankAccountID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountQueryByElements?NumberOfRows='20'&CompanyID='{{CompanyID}}'&LifeCycleStatusCode='3'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountQueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										},
										{
											"key": "LifeCycleStatusCode",
											"value": "'3'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"House bank account details retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountCollection('{{HouseBankAccountObjectID}}')?$expand=Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountCollection('{{HouseBankAccountObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CompanyPaymentFileRegisterObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Company payment file register for company \" + pm.environment.get(\"CompanyID\") + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/QueryByCompany?NumberOfRows='20'&CompanyID='{{CompanyID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"QueryByCompany"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Company payment file register and last inbound files for company \" + pm.environment.get(\"CompanyID\") + \" retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')?$expand=IncomingFile",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "IncomingFile"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create bank statement as incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"IncomingFileObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Bank statement created as inbound file\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ParentObjectID\": \"{{CompanyPaymentFileRegisterObjectID}}\",\n\t\"HouseBankUUID\": \"{{HouseBankUUID}}\",\n\t\"ContentTypeCode\": \"1\",\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"Reference Scenario Bank Statement {{$timestamp}}\",\n\t\t\t\t\"Name\": \"BAI2_Bank_Statement_{{$timestamp}}.txt\",\n\t\t\t\t\"MimeType\": \"text/plain\",\n\t\t\t\t\"Binary\": \"{{BAI2-BankStatementFile-base64}}\"\n\t\t\t}\n\t\t]\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start payment update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"File upload of bank statement inbound file stated\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd91b58-00be-42d7-b851-ed2a9de347dd",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/StartPaymentUpdate?ObjectID='{{IncomingFileObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"StartPaymentUpdate"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{IncomingFileObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Incomming file retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\",\"4\",\"6\",\"7\"]) });",
											"//pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Incoming file status: Uploaded\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"//pm.test(\"Incoming file status: Released\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
											"//pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											"//pm.test(\"Incoming file status: In process\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"7\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74d5bf-5f46-47f2-a699-d12bf2ddc3da",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection('{{IncomingFileObjectID}}')?$expand=AttachmentFolder",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection('{{IncomingFileObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "AttachmentFolder"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ID eq '25'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement \" + jsonResponse.d.results[0].ID + \" retrieved\", function () { pm.response.to.have.status(200) });",
											"let bankStatementID = +pm.environment.get(\"LastBankStatementID\") + 1; // '+' converts string to integer",
											"pm.test(\"Bank statement ID ... ok\", function () { pm.expect(jsonResponse.d.results[0].ID).to.eql(bankStatementID.toString()) });",
											"pm.test(\"Opening balance amount ... ok\", function () { pm.expect(jsonResponse.d.results[0].OpeningBalanceAmount).to.eql(pm.environment.get(\"LastBankStatementClosingBalanceAmount\")) });",
											"",
											"pm.test(\"Bank statement status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\"]) });",
											"//pm.test(\"Bank statement status: In preparation\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Bank statement status: Posted\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"2\") });",
											"",
											"pm.test(\"Post processing: \" + jsonResponse.d.results[0].OverallPostprocessingCodeText, function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.be.oneOf([\"1\",\"2\",\"4\"]) });",
											"//pm.test(\"Postprocessing: Not relevant\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"4\") });",
											"//pm.test(\"Postprocessing: In Process\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"2\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"type": "text",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invoice External Billing Documents",
			"item": [
				{
					"name": "Customer invoice with external payment",
					"item": [
						{
							"name": "Create customer invoice with external payment (SOAP 1.1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "691edeb4-7bfd-4e5f-8c75-c140cf9f04a2",
										"exec": [
											"let jsonResponse = xml2Json(responseBody);",
											"pm.environment.set(\"CustomerInvoiceRequestID\", jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:CustomerInvoiceRequestBundleMaintainConfirmation_sync'].CustomerInvoiceRequest.BaseBusinessTransactionDocumentID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:CustomerInvoiceRequestBundleMaintainConfirmation_sync'].CustomerInvoiceRequest.BaseBusinessTransactionDocumentID + \" created\", function () ",
											"    { ",
											"        pm.response.to.have.status(200); ",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e65b165-9326-4ac2-9a90-37c0ed7a5612",
										"exec": [
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"",
											"// Set External Reference",
											"var extRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoiceRequestExternalReference\", extRefID);",
											"",
											"// Set Base Document ID",
											"//var baseDocID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"INV-\" + todayDateTime;",
											"//pm.environment.set(\"CustomerInvoiceRequestID\", baseDocID);",
											"",
											"// Set Payment Reference ID",
											"var payRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"PAYREF-\" + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoicePaymentReferenceID\", payRefID);",
											"",
											"// Set Payment Transaction Reference ID",
											"var payTaRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"PAYTAREF-\" + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoicePaymentTransactionReferenceID\", payTaRefID);",
											"",
											"let moment = require('moment');",
											"",
											"// Set DocumentDate: today",
											"let documentDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"DocumentDate\", documentDate);",
											"",
											"// Set ValueDate: today",
											"let valueDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"ValueDate\", valueDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{CommunicationUserPW}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{CommunicationUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\" xmlns:glob1=\"http://sap.com/xi/AP/Globalization\">\n    <soapenv:Header/>\n    <soapenv:Body>\n        <glob:CustomerInvoiceRequestBundleMaintainRequest_sync>\n            <BusinessDocumentBasicMessageHeader>\n                <!-- Enter message header UUID for idem potency! -->\n                <!-- <UUID>?</UUID> -->\n            </BusinessDocumentBasicMessageHeader>\n            <CustomerInvoiceRequest actionCode=\"01\" itemListCompleteTransmissionIndicator=\"false\">\n                <ObjectNodeSenderTechnicalID>HDR_1</ObjectNodeSenderTechnicalID>\n                <BaseBusinessTransactionDocumentID>{{ExternalCustomerInvoiceRequestExternalReference}}</BaseBusinessTransactionDocumentID>\n                <Name>My customer invoice with external payment</Name>\n                <!-- SettlementPriorityCode: \n                 1 = Immediate - create custom invoice, \n                 2 = Urgent - stop if a down payment exists\n                 3 = Normal - save invoice request with status \"to be invoiced\" -->\n                <SettlementPriorityCode>1</SettlementPriorityCode>\n                <ReferenceBusinessTransactionDocumentID>{{ExternalCustomerInvoiceRequestExternalReference}}</ReferenceBusinessTransactionDocumentID> <!-- External Reference -->\n                <BuyerParty>\n                    <InternalID>{{CustomerID}}</InternalID>\n                </BuyerParty>\n                <SalesUnitParty>\n                    <InternalID>{{SalesUnitID}}</InternalID>\n                </SalesUnitParty>\n                <CashDiscountTerms>\n                    <!-- 1001 = immediately net; 1006 = 10 days 5% -->\n                    <Code>1001</Code>\n                    <!-- <FullPaymentEndDate>2019-05-30</FullPaymentEndDate> -->\n                </CashDiscountTerms>\n                <PaymentControl>\n                    <!-- PaymentFormCode: 04 = Direct Debit, 20 = External Payment -->\n                    <PaymentFormCode>20</PaymentFormCode>\n                    <PaymentReferenceID>{{ExternalCustomerInvoicePaymentReferenceID}}</PaymentReferenceID>\n                    <!-- used to clear the payment -->\n                    <PaymentReferenceTypeCode>5</PaymentReferenceTypeCode>\n                    <PaymentServiceSubscriberID>{{CompanyID}}</PaymentServiceSubscriberID>\n                    <PaymentServiceCustomerID>{{CustomerID}}</PaymentServiceCustomerID>\n                    <ExternalPayment actionCode=\"01\">\n                        <!-- <UUID>?</UUID> -->\n                        <!-- Bank Account ID from UI screen My Bank >> View All >> Bank Accounts -->\n                        <HouseBankAccountKeyInternalID>{{HouseBankAccountID}}</HouseBankAccountKeyInternalID>\n                        <!-- House bank: 1000644 - ABN AMRO Bank -->\n                        <PaymentTransactionReferenceID>{{ExternalCustomerInvoicePaymentTransactionReferenceID}}</PaymentTransactionReferenceID>\n                        <DocumentDate>{{DocumentDate}}</DocumentDate>\n                        <ValueDate>{{ValueDate}}</ValueDate>\n                        <Amount currencyCode=\"USD\">1000</Amount>\n                    </ExternalPayment>\n                </PaymentControl>\n                <PricingTerms>\n                    <!-- PricingProcedureCode: PPGP02 = Standard Gross Procedure, PPSTD1 = Standard Procedure -->\n                    <PricingProcedureCode>PPGP02</PricingProcedureCode>\n                    <CurrencyCode>USD</CurrencyCode>\n                </PricingTerms>\n<!-- Invoice item | service product | tax code derived by system -->\n                <Item>\n                    <BaseBusinessTransactionDocumentItemID>10</BaseBusinessTransactionDocumentItemID>\n                    <!-- ReceivablesPropertyMovementDirectionCode: 1 = Credit memo item, 2 = Invoice item -->\n                    <ReceivablesPropertyMovementDirectionCode>2</ReceivablesPropertyMovementDirectionCode>\n                    <!-- <Description languageCode=\"EN\">My invoice item</Description> -->\n                    <CashDiscountDeductibleIndicator>false</CashDiscountDeductibleIndicator>\n                    <Product>\n                        <InternalID>{{ServiceProductID2}}</InternalID>\n                        <TypeCode>2</TypeCode>\n                    </Product>\n                    <Quantity unitCode=\"HUR\">10</Quantity>\n                    <QuantityTypeCode>TIME</QuantityTypeCode>\n                    <PriceAndTax>\n                        <!-- List Price -->\n                        <PriceComponent>\n                            <!-- TypeCode: 8PR1 = Gross list price, 7PR1 = Net list price -->\n                            <TypeCode>8PR1</TypeCode>\n                            <Rate>\n                                <DecimalValue>1200</DecimalValue>\n                                <CurrencyCode>USD</CurrencyCode>\n                                <BaseDecimalValue>10</BaseDecimalValue>\n                                <BaseMeasureUnitCode>HUR</BaseMeasureUnitCode>\n                            </Rate>\n                        </PriceComponent>\n                    </PriceAndTax>\n                    <ObjectNodeSenderTechnicalID>ITM_1</ObjectNodeSenderTechnicalID>\n                </Item>\n<!-- Credit memo item | free text -->\n                <Item>\n                    <BaseBusinessTransactionDocumentItemID>20</BaseBusinessTransactionDocumentItemID>\n                    <!-- ReceivablesPropertyMovementDirectionCode: 1 = Credit memo item, 2 = Invoice item -->\n                    <ReceivablesPropertyMovementDirectionCode>1</ReceivablesPropertyMovementDirectionCode>\n                    <Description languageCode=\"EN\">My free text invoice item</Description>\n                    <CashDiscountDeductibleIndicator>false</CashDiscountDeductibleIndicator>\n                    <Quantity unitCode=\"EA\">1</Quantity>\n                    <QuantityTypeCode>EA</QuantityTypeCode>\n                    <PriceAndTax>\n                        <!-- List Price -->\n                        <PriceComponent>\n                            <TypeCode>8PR1</TypeCode>\n                            <Rate>\n                                <DecimalValue>200.00</DecimalValue>\n                                <CurrencyCode>USD</CurrencyCode>\n                            </Rate>\n                        </PriceComponent>\n                    </PriceAndTax>\n                    <ProductTaxDetails>\n                        <ProductTaxationCharacteristicsCode listID=\"US\">500</ProductTaxationCharacteristicsCode>\n                    </ProductTaxDetails>\n                    <AccountingCodingBlockAssignment>\n                        <AccountingCodingBlock>\n                            <AccountingCodingBlockTypeCode>ACC</AccountingCodingBlockTypeCode>\n                            <GeneralLedgerAccountAliasCode>A-1700</GeneralLedgerAccountAliasCode>\n                        </AccountingCodingBlock>\n                    </AccountingCodingBlockAssignment>\n                    <ObjectNodeSenderTechnicalID>ITM_2</ObjectNodeSenderTechnicalID>\n                </Item>\n            </CustomerInvoiceRequest>\n        </glob:CustomerInvoiceRequestBundleMaintainRequest_sync>\n    </soapenv:Body>\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/managecustomerinvoicerequesti4",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"bc",
										"srt",
										"scs",
										"sap",
										"managecustomerinvoicerequesti4"
									]
								}
							},
							"response": [
								{
									"name": "Create production proposal (Soap 1.1)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <glob:CreateProductionProposal>\r\n         <CreateProductionPlanningOrder>\r\n            <SequenceNumber>1</SequenceNumber>\r\n            <SupplyPlanningAreaID>P1100</SupplyPlanningAreaID>\r\n            <MaterialID>P100101</MaterialID>\r\n            <!-- <ProductRequirementSpecificationID>?</ProductRequirementSpecificationID> -->\r\n            <MaterialAvailabilityDateTime timeZoneCode=\"CET\">2019-02-05T12:00:00.0000000Z</MaterialAvailabilityDateTime>\r\n            <Quantity unitCode=\"EA\">1</Quantity>\r\n            <QuantityTypeCode>EA</QuantityTypeCode>\r\n         </CreateProductionPlanningOrder>\r\n      </glob:CreateProductionProposal>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
										},
										"url": {
											"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/manageproductionproposalin",
											"protocol": "https",
											"host": [
												"{{TenantHostname}}"
											],
											"path": [
												"sap",
												"bc",
												"srt",
												"scs",
												"sap",
												"manageproductionproposalin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "content-type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "content-length",
											"value": "505"
										},
										{
											"key": "sap-system",
											"value": "KHL"
										},
										{
											"key": "www-authenticate",
											"value": "Basic realm=\"SAP NetWeaver Application Server [KHL/171][alias]\""
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "<html>\n    <head>\n        <title>Logon Error Message</title>\n        <META http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n        <style type=\"text/css\">body { font-family:tahoma,helvetica,sans-serif;color:#333333;background-color:#FFFFFF; }td { font-family:tahoma,helvetica,sans-serif;font-size:70%;color:#333333; }h1 { font-family:tahoma,helvetica,sans-serif;font-size:160%;font-weight:bold;margin-top:15px;margin-bottom:3px;color:#003366; }h2 { font-family:verdana,helvetica,sans-serif;font-size:120%;font-style:italic;font-weight:bold;margin-top:6px;margin-bottom:6px;color:#999900; }p { font-family:tahoma,helvetica,sans-serif;color:#333333;margin-top:4px;margin-bottom:4px; }ul { font-family:tahoma,helvetica,sans-serif;color:#333333;list-style-type:square;margin-top:8px;margin-bottom:8px; }li { font-family:tahoma,helvetica,sans-serif;color:#33333;margin-top:4px; }.emphasize { color:#333333;background-color:#C8E3FF;padding:5px;}.note { color:#CC6600; }a { font-family:tahoma,helvetica,sans-serif;text-decoration:underline;color:#336699; }a:visited { color:#001166; }a:hover { text-decoration:none; }</style>\n    </head>\n    <body>\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n            <tr>\n                <td>\n                    <h1>Logon failed</h1>\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Get customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerInvoiceRequestID\", jsonResponse.d.results[0].BaseBusinessTransactionDocumentID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice request consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice item 1: \" + jsonResponse.d.results[0].Item[0].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice item 2: \" + jsonResponse.d.results[0].Item[1].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[1].InvoicingStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546de23c-d88a-4193-ac90-d23d098e2b99",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$expand=Item,PaymentControl/PaymentControlExternalPayment&$filter=BaseBusinessTransactionDocumentID eq '{{CustomerInvoiceRequestID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "Item,PaymentControl/PaymentControlExternalPayment"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{CustomerInvoiceRequestID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query customer invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"CustomerInvoiceObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceQueryByElements2?NumberOfRows='20'&ItemBusinessTransactionDocumentReference_ID='{{CustomerInvoiceRequestID}}'&ItemBusinessTransactionDocumentReference_TypeCode='29'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceQueryByElements2"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_ID",
											"value": "'{{CustomerInvoiceRequestID}}'"
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_TypeCode",
											"value": "'29'",
											"description": "29 = Customer invopice request"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice (key access) and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" retrieved\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')?$format=json&$expand=BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pre-confirm payments using clearing house statements",
					"item": [
						{
							"name": "Get customer invoice and create clearing house statement file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"External customer invoice \" + jsonResponse.d.results[0].CustomerInvoice.ID + \" found\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
											"});",
											"pm.test(\"Payment transaction reference: \" + jsonResponse.d.results[0].ExternalPayment[0].PaymentTransactionReferenceID, function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
											"});",
											"pm.test(\"Release status: \" + jsonResponse.d.results[0].CustomerInvoice.ReleaseStatusCodeText, function() {",
											"    pm.expect(jsonResponse.d.results[0].CustomerInvoice.ReleaseStatusCode).to.eql(\"3\")",
											"});",
											"pm.test(\"Total amount: \" + jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmount + \" \" + jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmountCurrencyCode, function() {",
											"    pm.expect(jsonResponse.d.results[0].CustomerInvoice.TotalGrossAmountCurrencyCode).to.eql(\"USD\")",
											"});",
											"",
											"// Create clearing house statement file from payment items",
											"let writer = eval(globals.ClearingHouseStatementWriter);",
											"writer.StartNewStatement();",
											"",
											"var paymentAmount = 0.00;",
											"var paymentCurrency = \"\";",
											"var paymentRef = \"\";",
											"",
											"var moment = require('moment');",
											"var statementDate = moment().add(0,'day').toISOString().substr(0,10);",
											"var paymentExecutionDate = moment().add(0,'day').toISOString().substr(0,10);",
											"",
											"// Loop payment items and create clearing house statement items",
											"console.log(\"- Start loop -\");",
											"var numberOfItems = Number(jsonResponse.d.__count);",
											"for (let index = 0; index < numberOfItems; index++) {",
											"    paymentAmount = jsonResponse.d.results[index].ExternalPayment[0].Amount;",
											"    paymentCurrency = jsonResponse.d.results[index].ExternalPayment[0].CurrencyCode;",
											"    paymentRef = jsonResponse.d.results[index].ExternalPayment[0].PaymentTransactionReferenceID;",
											"    console.log(\"Item index: \" + index + \" | Amount: \" + paymentAmount + \" \" + paymentCurrency);",
											"    console.log(\"Payment transaction reference: \" + paymentRef + \" | Customer name: \" + jsonResponse.d.results[index].CustomerInvoice.BuyerParty.BuyerPartyName[0].FormattedName);",
											"    writer.AddItem(paymentRef, paymentAmount, paymentCurrency, paymentExecutionDate);",
											"}",
											"console.log(\"- End loop -\");",
											"",
											"// Set Clearing house statement ID",
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"var chsID = pm.environment.get(\"ExternalBillingDocPrefix\") + todayDateTime;",
											"pm.environment.set(\"ClearingHouseStatementID\", chsID);",
											"",
											"// Finalize clearing house statement file",
											"pm.environment.set(\"ClearingHouseStatementFile\", writer.Finalize(pm.environment.get(\"ClearingHouseStatementID\"), pm.environment.get(\"ClearingHouseAccountMerchantID\"), paymentCurrency, statementDate));",
											"",
											"console.log(\"Clearing House Statement File: \");",
											"console.log(pm.environment.get(\"ClearingHouseStatementFile\"));",
											"",
											"// Base64 encode the bank statement file string",
											"var cryptoJS = require(\"crypto-js\");",
											"var rawContent = cryptoJS.enc.Utf8.parse(pm.environment.get(\"ClearingHouseStatementFile\"));",
											"var base64Content = cryptoJS.enc.Base64.stringify(rawContent);",
											"pm.environment.set(\"ClearingHouseStatementFile-base64\", base64Content);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81136713-2039-47d6-8e37-0e7919c4abde",
										"exec": [
											"// Functions to create Clearing House Statement file",
											"postman.setGlobalVariable(\"ClearingHouseStatementWriter\", function ClearingHouseStatementWriter() {",
											"    let writer = {};",
											"",
											"    writer.StartNewStatement = function StartNewStatement() {",
											"        //initializing variables",
											"        pm.globals.set(\"CHSItems\", \"\");",
											"        pm.globals.set(\"CHSItemTotalNumberValue\", 0);",
											"        pm.globals.set(\"CHSTotalAmount\", 0);",
											"    };",
											"    ",
											"    writer.AddItem = function AddItem(paymentRef, paymentAmount, paymentCurrency, paymentExecutionDate) {",
											"    ",
											"        // temlate for clearing house statement item",
											"        var itemXML = '  <!-- Payment item -->\\r\\n' +",
											"                      '  <PaymentOrderProcessingStatementItem>\\r\\n' +",
											"                      '    <!-- Type code: 350 = Credit Card Payment Confirmation -->\\r\\n' +",
											"                      '    <TypeCode>350</TypeCode>\\r\\n' +",
											"                      '    <PaymentReference>\\r\\n' +",
											"                      '      <ID>[paymentRef]</ID>\\r\\n' +",
											"                      '      <!-- Type code: 23 = Clearing House Payment Order -->\\r\\n' +",
											"                      '      <TypeCode>23</TypeCode>\\r\\n' +",
											"                      '    </PaymentReference>\\r\\n' +",
											"                      '    <!-- PropertyMovementDirectionCode: 1 = Credit, 2 = Debit -->\\r\\n' +",
											"                      '    <PropertyMovementDirectionCode>[propertyMovementDirectionCode]</PropertyMovementDirectionCode>\\r\\n' +",
											"                      '    <PaymentAmount currencyCode=\"[currencyCode]\">[paymentAmount]</PaymentAmount>\\r\\n' +",
											"                      '    <FeePercent>0</FeePercent>\\r\\n' +",
											"                      '    <!-- Transaction Date -->\\r\\n' +",
											"                      '    <PaymentExecutionDate>[paymentExecutionDate]</PaymentExecutionDate>\\r\\n' +",
											"                      '  </PaymentOrderProcessingStatementItem>\\r\\n';",
											"",
											"        // fill in values",
											"        itemXML = itemXML.replace('[paymentRef]', paymentRef);",
											"        itemXML = itemXML.replace('[paymentAmount]', Math.abs(paymentAmount));",
											"        itemXML = itemXML.replace('[currencyCode]', paymentCurrency);",
											"        itemXML = itemXML.replace('[paymentExecutionDate]', paymentExecutionDate);",
											"        if (paymentAmount >= 0) {",
											"            itemXML = itemXML.replace('[propertyMovementDirectionCode]', \"2\"); // debit item",
											"        }",
											"        if (paymentAmount < 0) {",
											"            itemXML = itemXML.replace('[propertyMovementDirectionCode]', \"1\"); // credit item",
											"        }",
											"",
											"        // add item to file",
											"        itemXML = pm.globals.get(\"CHSItems\") + itemXML;",
											"        pm.globals.set(\"CHSItems\", itemXML);",
											"        ",
											"        // check sums",
											"        pm.globals.set(\"CHSItemTotalNumberValue\", pm.globals.get(\"CHSItemTotalNumberValue\") + 1);",
											"        pm.globals.set(\"CHSTotalAmount\", pm.globals.get(\"CHSTotalAmount\") + paymentAmount * 1);",
											"    };",
											"",
											"    writer.Finalize = function Finalize(clearingHouseStatementID, companyClearingHouseID, currencyCode, statementDate) {",
											"        ",
											"        // add templates for envelope and header",
											"        var stmt = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\r\\n' + ",
											"                   '<PaymentOrderProcessingStatementNotification>\\r\\n' + ",
											"                   '  <!-- ID of the acquirer for this statement; expected in memo line of bank statement -->\\r\\n' + ",
											"                   '  <ID>[clearingHouseStatementID]</ID>\\r\\n' + ",
											"                   '  <ClearingHouseAccount>\\r\\n' + ",
											"                   '    <!-- Clearing house Merchant ID -->\\r\\n' + ",
											"                   '    <CompanyClearingHouseID>[companyClearingHouseID]</CompanyClearingHouseID>\\r\\n' + ",
											"                   '  </ClearingHouseAccount>\\r\\n' + ",
											"                   '  <!-- Type code: 1568 = Clearing House Payment Order Processing Statement -->\\r\\n' + ",
											"                   '  <TypeCode>1568</TypeCode>\\r\\n' + ",
											"                   '  <!-- Format code: 1 = Clearing House Statement -->\\r\\n' + ",
											"                   '  <FormatCode>1</FormatCode>\\r\\n' + ",
											"                   '  <ItemTotalNumberValue>[itemTotalNumberValue]</ItemTotalNumberValue>\\r\\n' + ",
											"                   '  <TotalAmount currencyCode=\"[currencyCode]\">[totalAmount]</TotalAmount>\\r\\n' + ",
											"                   '  <!-- Date when file was created by provider -->\\r\\n' + ",
											"                   '  <Date>[statementDate]</Date>\\r\\n' + ",
											"                   pm.globals.get(\"CHSItems\") + ",
											"                   '</PaymentOrderProcessingStatementNotification>';",
											"",
											"        // fill in values",
											"        stmt = stmt.replace(\"[clearingHouseStatementID]\", clearingHouseStatementID);",
											"        stmt = stmt.replace(\"[companyClearingHouseID]\", companyClearingHouseID);",
											"        stmt = stmt.replace(\"[itemTotalNumberValue]\", pm.globals.get(\"CHSItemTotalNumberValue\"));",
											"        stmt = stmt.replace(\"[currencyCode]\", currencyCode);",
											"        stmt = stmt.replace(\"[totalAmount]\", pm.globals.get(\"CHSTotalAmount\"));",
											"        stmt = stmt.replace(\"[statementDate]\", statementDate);",
											"",
											"        //clean-up",
											"        pm.globals.unset(\"CHSItems\");",
											"        pm.globals.unset(\"CHSItemTotalNumberValue\");",
											"        pm.globals.unset(\"CHSTotalAmount\");",
											"",
											"        //return file",
											"        return stmt;",
											"    };",
											"",
											"    return writer;",
											"",
											"} + '; ClearingHouseStatementWriter();');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/PaymentControlCollection?$format=json&$filter=PaymentReferenceID eq '{{ExternalCustomerInvoicePaymentReferenceID}}'&$expand=CustomerInvoice/BusinessTransactionDocumentReference,ExternalPayment,CustomerInvoice/BuyerParty/BuyerPartyName&$inlinecount=allpages",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"PaymentControlCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "PaymentReferenceID eq '{{ExternalCustomerInvoicePaymentReferenceID}}'"
										},
										{
											"key": "$expand",
											"value": "CustomerInvoice/BusinessTransactionDocumentReference,ExternalPayment,CustomerInvoice/BuyerParty/BuyerPartyName"
										},
										{
											"key": "$inlinecount",
											"value": "allpages"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"HouseBankUUID\", jsonResponse.d.results[0].HouseBankUUID);",
											"pm.environment.set(\"HouseBankAccountObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"House bank account found \" + jsonResponse.d.results[0].BankAccountID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountQueryByElements?NumberOfRows='20'&CompanyID='{{CompanyID}}'&LifeCycleStatusCode='3'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountQueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										},
										{
											"key": "LifeCycleStatusCode",
											"value": "'3'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CompanyPaymentFileRegisterObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Company payment file register for company \" + pm.environment.get(\"CompanyID\") + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/QueryByCompany?NumberOfRows='20'&CompanyID='{{CompanyID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"QueryByCompany"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Company payment file register and last inbound files for company \" + pm.environment.get(\"CompanyID\") + \" retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')?$expand=IncomingFile",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "IncomingFile"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create clearing house statement as incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"IncomingFileObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Clearing house statement created as inbound file\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"File ID: \" + jsonResponse.d.results.ID, function () { pm.response.to.have.status(201) });",
											"pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ParentObjectID\": \"{{CompanyPaymentFileRegisterObjectID}}\",\n\t\"HouseBankUUID\": \"{{HouseBankUUID}}\",\n\t\"ContentTypeCode\": \"6\",\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"External Billing - Clearing House Statement {{$timestamp}}\",\n\t\t\t\t\"Name\": \"B_Clearing_House_Statement_{{$timestamp}}.txt\",\n\t\t\t\t\"MimeType\": \"text/plain\",\n\t\t\t\t\"Binary\": \"{{ClearingHouseStatementFile-base64}}\"\n\t\t\t}\n\t\t]\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start payment update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"File upload of clearing house statement inbound file stated\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd91b58-00be-42d7-b851-ed2a9de347dd",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/StartPaymentUpdate?ObjectID='{{IncomingFileObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"StartPaymentUpdate"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{IncomingFileObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Incomming file retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\",\"4\",\"6\",\"7\"]) });",
											"//pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Incoming file status: Uploaded\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"//pm.test(\"Incoming file status: Released\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
											"//pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											"//pm.test(\"Incoming file status: In process\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"7\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74d5bf-5f46-47f2-a699-d12bf2ddc3da",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection('{{IncomingFileObjectID}}')?$expand=AttachmentFolder",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection('{{IncomingFileObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "AttachmentFolder"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ID eq '25'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm payments using bank statements",
					"item": [
						{
							"name": "Get previous bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement found; Bank statement ID: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											"",
											"// Persist data from last bank statement",
											"for (let index = 0; index < 1; index++)",
											"{ ",
											"    pm.environment.set(\"LastBankStatementID\", jsonResponse.d.results[0].ID);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceAmount\", jsonResponse.d.results[0].ClosingBalanceAmount);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", jsonResponse.d.results[0].CurrencyCode);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											"// Initialize variables of the last bank statement",
											"// These values apply if no bank statement has been posted before",
											"pm.environment.unset(\"LastBankStatementID\");",
											"pm.environment.set(\"LastBankStatementClosingBalanceAmount\", 0);",
											"pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", \"USD\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						},
						{
							"name": "Get clearing house statement and create bank statement file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Clearing house statement \" + jsonResponse.d.results[0].ID + \" found\", function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"pm.test(\"Status: \" + jsonResponse.d.results[0].StatusCodeText, function() { pm.expect(jsonResponse.d.results[0].StatusCode).to.eql(\"2\") });",
											"pm.test(\"Total amount: \" + jsonResponse.d.results[0].TotalTransactionAmount + \" \" + jsonResponse.d.results[0].TotalTransactionAmountCurrencyCode, function() { pm.expect(jsonResponse.d.results[0].TotalTransactionAmountCurrencyCode).to.eql(\"USD\") });",
											"pm.test(\"External ID: \" + jsonResponse.d.results[0].ExternalID, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"",
											"",
											"// Create BAI2 bank statement file from open items",
											"let writer = eval(globals.BAI2StmtWriter);",
											"writer.StartNewStatement();",
											"",
											"// Loop open items and create bank statement lines",
											"var amountOnBankStatement = 0.00;",
											"var referenceOnBankStatement = \"\";",
											"var nameOnBankStatement = \"\";",
											"var numberOfItems = Number(jsonResponse.d.__count);",
											"console.log(\"- Start loop -\");",
											"for (let index = 0; index < numberOfItems; index++) {",
											"    amountOnBankStatement = jsonResponse.d.results[index].TotalTransactionAmount;",
											"    referenceOnBankStatement = jsonResponse.d.results[index].ExternalID;",
											"    nameOnBankStatement = pm.environment.get(\"ClearingHouseName\");",
											"",
											"    console.log(\"Open item index: \" + index + \" | Amount: \" + amountOnBankStatement);",
											"    console.log(\"External reference: \" + referenceOnBankStatement + \" | Customer name: \" + nameOnBankStatement);",
											"",
											"    //Add bank statement line items (12.50, \"R-20190430114408\", \"Luxury Heating & Cooling Co\")",
											"    //Transaction codes: 195 incoming cash transfer, 495 outgoing cash transfer, 399 miscellaneous credit, 699 miscellaneous debit, 166 ACH Settlement (credit), 466 ACH Settlement (debit)",
											"    // 1. External payment of sales order, allocation by external payment transaction reference ID",
											"    if (amountOnBankStatement >= 0) {",
											"        writer.AddIncomingTransaction(\"166\", amountOnBankStatement, referenceOnBankStatement, nameOnBankStatement);",
											"    }",
											"    // 2. Open item of customer return credit memo, allocation by credit memo external reference",
											"    if (amountOnBankStatement < 0) { ",
											"        writer.AddOutgoingTransaction(\"466\", amountOnBankStatement, referenceOnBankStatement, nameOnBankStatement);",
											"    }",
											"}",
											"console.log(\"- End loop -\");",
											"",
											"",
											"// Set bank statement date and convert date to BAI2 format YYMMDD",
											"var moment = require('moment');",
											"var today = moment.utc(pm.environment.get(\"$timestamp\"));",
											"console.log(\"Today's date: \" + today);",
											"console.log(\"Today's date (ISO): \" + today.toISOString());",
											"var year = (today.get('year') - 2000).toString();",
											"var month = (today.get('month') + 1).toString();",
											"if (month.length == 1) {",
											"    month = \"0\" + month;",
											"}",
											"var day = today.get('date').toString();",
											"if (day.length == 1) {",
											"    day = \"0\" + day;",
											"}",
											"var bankStatementDate = year + month + day;",
											"console.log(\"Bank statement date: \" + bankStatementDate);",
											"pm.environment.set(\"BankStatementDate\", bankStatementDate);",
											"",
											"// writer.Finalize = function Finalize(bankAccountId, stmtDate \"181211\", openingBalance 222.23)",
											"pm.environment.set(\"BAI2-BankStatementFile\", writer.Finalize(pm.environment.get(\"HouseBankAccountID\"), pm.environment.get(\"HouseBankRoutingID\"), bankStatementDate, parseFloat(pm.environment.get(\"LastBankStatementClosingBalanceAmount\"))));",
											"",
											"console.log(\"BAI2-file:\");",
											"console.log(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"",
											"// Base64 encode the bank statement file string",
											"var cryptoJS = require(\"crypto-js\");",
											"var rawContent = cryptoJS.enc.Utf8.parse(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"var base64Content = cryptoJS.enc.Base64.stringify(rawContent);",
											"pm.environment.set(\"BAI2-BankStatementFile-base64\", base64Content);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81136713-2039-47d6-8e37-0e7919c4abde",
										"exec": [
											"// Functions to create BAI2 bank statement file",
											"postman.setGlobalVariable(\"BAI2StmtWriter\", function BAI2StmtWriter() {",
											"    let writer = {};",
											"",
											"    writer.StartNewStatement = function StartNewStatement() {",
											"        //initializing variables",
											"        pm.globals.set(\"BAI2Transactions\", \"\");",
											"        pm.globals.set(\"BAI2CounterAccountLines\", 0);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", 0);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", 0);",
											"        pm.globals.set(\"BAI2TotalsDebit\", 0);",
											"        pm.globals.set(\"BAI2TotalsCredit\", 0);",
											"    };",
											"    ",
											"    writer.AddIncomingTransaction = function AddIncomingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],0,0022640118XF,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] ORIG CO NAME=[customer]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[customer]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsCredit\", pm.globals.get(\"BAI2TotalsCredit\") + amount * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", pm.globals.get(\"BAI2CounterCreditLines\") + 1);",
											"    };",
											"",
											"    writer.AddOutgoingTransaction = function AddOutgoingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],V,[date],,,,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] BENEFICIARY=[bpName]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[bpName]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsDebit\", pm.globals.get(\"BAI2TotalsDebit\") + Math.abs(amount) * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", pm.globals.get(\"BAI2CounterDebitLines\") + 1);",
											"    };",
											"",
											"    writer.Finalize = function Finalize(bankAccountId, bankRoutingId, stmtDate, openingBalance) {",
											"        ",
											"        //add templates for missing templates and trailers",
											"        var stmt = \"01,10000002,SABBYD,[date],[time],[fileID],,,2/\\r\\n\" + ",
											"                   \"02,SAPBYD,[bankRoutingId],1,[date],[time],USD,/\\r\\n\" + ",
											"                   \"03,[bankAccId],USD,010,[openingBalance],,,015,[closingBalance],,,/\\r\\n\" + ",
											"                   \"88,100,[totalCredit],[lineCountCredit],,400,[totalDebit],[lineCountDebit],/\\r\\n\" + ",
											"                   pm.globals.get(\"BAI2Transactions\") + ",
											"                   \"49,0,[lineCountAccountLvl]/\\r\\n\" + ",
											"                   \"98,0,1,[lineCountGroupLvl]/\\r\\n\" + ",
											"                   \"99,0,1,[lineCountFileLvl]/\";",
											"        ",
											"        //take some variables local for better readibility",
											"        let totalCredit = pm.globals.get(\"BAI2TotalsCredit\");",
											"        let totalDebit = pm.globals.get(\"BAI2TotalsDebit\");",
											"        let lineCountAccountLvl = pm.globals.get(\"BAI2CounterAccountLines\");",
											"    ",
											"        //fill in values",
											"        stmt = stmt.replace(/(\\[date\\])/g, stmtDate);",
											"        stmt = stmt.replace(/(\\[time\\])/g, \"0730\"); //fix at first",
											"        stmt = stmt.replace(\"[fileID]\", \"1\"); //fix at first",
											"        stmt = stmt.replace(\"[bankRoutingId]\", bankRoutingId);",
											"        stmt = stmt.replace(\"[bankAccId]\", bankAccountId);",
											"        stmt = stmt.replace(\"[openingBalance]\", (Math.round(openingBalance * 100)).toString());",
											"        stmt = stmt.replace(\"[closingBalance]\", (Math.round((openingBalance * 100) + totalCredit - totalDebit)).toString());",
											"        stmt = stmt.replace(\"[totalCredit]\", Math.abs(totalCredit));",
											"        stmt = stmt.replace(\"[lineCountCredit]\", pm.globals.get(\"BAI2CounterCreditLines\"));",
											"        stmt = stmt.replace(\"[totalDebit]\", Math.abs(totalDebit));",
											"        stmt = stmt.replace(\"[lineCountDebit]\", pm.globals.get(\"BAI2CounterDebitLines\"));",
											"        stmt = stmt.replace(\"[lineCountAccountLvl]\", lineCountAccountLvl + 2); // plus header and trailer",
											"        stmt = stmt.replace(\"[lineCountGroupLvl]\", lineCountAccountLvl + 4);",
											"        stmt = stmt.replace(\"[lineCountFileLvl]\", lineCountAccountLvl + 6);",
											"    ",
											"        //clean-up",
											"        pm.globals.unset(\"BAI2Transactions\");",
											"        pm.globals.unset(\"BAI2CounterFileLines\");",
											"        pm.globals.unset(\"BAI2CounterGroupLines\");",
											"        pm.globals.unset(\"BAI2CounterAccountLines\");",
											"        pm.globals.unset(\"BAI2CounterDebitLines\");",
											"        pm.globals.unset(\"BAI2CounterCreditLines\");",
											"        pm.globals.unset(\"BAI2TotalsDebit\");",
											"        pm.globals.unset(\"BAI2TotalsCredit\");",
											"        ",
											"        //return file",
											"        return stmt;",
											"",
											"    };",
											"",
											"    return writer;",
											"",
											"} + '; BAI2StmtWriter();');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khpaymentorderprocessingstatement/PaymentOrderProcessingStatementCollection?$format=json&$filter=ExternalID eq '{{ClearingHouseStatementID}}'&$expand=CompanyName&$inlinecount=allpages",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khpaymentorderprocessingstatement",
										"PaymentOrderProcessingStatementCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "ExternalID eq '{{ClearingHouseStatementID}}'"
										},
										{
											"key": "$expand",
											"value": "CompanyName"
										},
										{
											"key": "$inlinecount",
											"value": "allpages"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"HouseBankUUID\", jsonResponse.d.results[0].HouseBankUUID);",
											"pm.environment.set(\"HouseBankAccountObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"House bank account found \" + jsonResponse.d.results[0].BankAccountID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountQueryByElements?NumberOfRows='20'&CompanyID='{{CompanyID}}'&LifeCycleStatusCode='3'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountQueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										},
										{
											"key": "LifeCycleStatusCode",
											"value": "'3'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"House bank account details retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountCollection('{{HouseBankAccountObjectID}}')?$expand=Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountCollection('{{HouseBankAccountObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CompanyPaymentFileRegisterObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Company payment file register for company \" + pm.environment.get(\"CompanyID\") + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/QueryByCompany?NumberOfRows='20'&CompanyID='{{CompanyID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"QueryByCompany"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Company payment file register and last inbound files for company \" + pm.environment.get(\"CompanyID\") + \" retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')?$expand=IncomingFile",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "IncomingFile"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create bank statement as incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"IncomingFileObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Bank statement created as inbound file\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ParentObjectID\": \"{{CompanyPaymentFileRegisterObjectID}}\",\n\t\"HouseBankUUID\": \"{{HouseBankUUID}}\",\n\t\"ContentTypeCode\": \"1\",\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"External Billing - Bank Statement {{$timestamp}}\",\n\t\t\t\t\"Name\": \"B_BAI2_Bank_Statement_{{$timestamp}}.txt\",\n\t\t\t\t\"MimeType\": \"text/plain\",\n\t\t\t\t\"Binary\": \"{{BAI2-BankStatementFile-base64}}\"\n\t\t\t}\n\t\t]\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start payment update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"File upload of bank statement inbound file stated\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd91b58-00be-42d7-b851-ed2a9de347dd",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/StartPaymentUpdate?ObjectID='{{IncomingFileObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"StartPaymentUpdate"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{IncomingFileObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Incomming file retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\",\"4\",\"6\",\"7\"]) });",
											"//pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Incoming file status: Uploaded\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"//pm.test(\"Incoming file status: Released\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
											"//pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											"//pm.test(\"Incoming file status: In process\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"7\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74d5bf-5f46-47f2-a699-d12bf2ddc3da",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection('{{IncomingFileObjectID}}')?$expand=AttachmentFolder",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection('{{IncomingFileObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "AttachmentFolder"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ID eq '25'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement \" + jsonResponse.d.results[0].ID + \" retrieved\", function () { pm.response.to.have.status(200) });",
											"let bankStatementID = +pm.environment.get(\"LastBankStatementID\") + 1; // '+' converts string to integer",
											"pm.test(\"Bank statement ID ... ok\", function () { pm.expect(jsonResponse.d.results[0].ID).to.eql(bankStatementID.toString()) });",
											"pm.test(\"Opening balance amount ... ok\", function () { pm.expect(jsonResponse.d.results[0].OpeningBalanceAmount).to.eql(pm.environment.get(\"LastBankStatementClosingBalanceAmount\")) });",
											"",
											"pm.test(\"Bank statement status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\"]) });",
											"//pm.test(\"Bank statement status: In preparation\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Bank statement status: Posted\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"2\") });",
											"",
											"pm.test(\"Post processing: \" + jsonResponse.d.results[0].OverallPostprocessingCodeText, function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.be.oneOf([\"1\",\"2\",\"4\"]) });",
											"//pm.test(\"Postprocessing: Not relevant\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"4\") });",
											"//pm.test(\"Postprocessing: In Process\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"2\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"type": "text",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invoice External Billing Documents with Payment Monitor",
			"item": [
				{
					"name": "Customer invoice with external payment",
					"item": [
						{
							"name": "Create customer invoice with external payment (SOAP 1.1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "691edeb4-7bfd-4e5f-8c75-c140cf9f04a2",
										"exec": [
											"let jsonResponse = xml2Json(responseBody);",
											"pm.environment.set(\"CustomerInvoiceRequestID\", jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:CustomerInvoiceRequestBundleMaintainConfirmation_sync'].CustomerInvoiceRequest.BaseBusinessTransactionDocumentID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse['soap-env:Envelope']['soap-env:Body']['n0:CustomerInvoiceRequestBundleMaintainConfirmation_sync'].CustomerInvoiceRequest.BaseBusinessTransactionDocumentID + \" created\", function () ",
											"    { ",
											"        pm.response.to.have.status(200); ",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e65b165-9326-4ac2-9a90-37c0ed7a5612",
										"exec": [
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"",
											"// Set External Reference",
											"var extRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoiceRequestExternalReference\", extRefID);",
											"",
											"// Set Base Document ID",
											"//var baseDocID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"INV-\" + todayDateTime;",
											"//pm.environment.set(\"CustomerInvoiceRequestID\", baseDocID);",
											"",
											"// Set Payment Reference ID",
											"var payRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"PAYREF-\" + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoicePaymentReferenceID\", payRefID);",
											"",
											"// Set Payment Transaction Reference ID",
											"var payTaRefID = pm.environment.get(\"ExternalBillingDocPrefix\") + \"PAYTAREF-\" + todayDateTime;",
											"pm.environment.set(\"ExternalCustomerInvoicePaymentTransactionReferenceID\", payTaRefID);",
											"",
											"let moment = require('moment');",
											"",
											"// Set DocumentDate: today",
											"let documentDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"DocumentDate\", documentDate);",
											"",
											"// Set ValueDate: today",
											"let valueDate = moment().add(0,'day').toISOString().substr(0,10);",
											"pm.environment.set(\"ValueDate\", valueDate);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{CommunicationUserPW}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{CommunicationUser}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\" xmlns:glob1=\"http://sap.com/xi/AP/Globalization\">\n    <soapenv:Header/>\n    <soapenv:Body>\n        <glob:CustomerInvoiceRequestBundleMaintainRequest_sync>\n            <BusinessDocumentBasicMessageHeader>\n                <!-- Enter message header UUID for idem potency! -->\n                <!-- <UUID>?</UUID> -->\n            </BusinessDocumentBasicMessageHeader>\n            <CustomerInvoiceRequest actionCode=\"01\" itemListCompleteTransmissionIndicator=\"false\">\n                <ObjectNodeSenderTechnicalID>HDR_1</ObjectNodeSenderTechnicalID>\n                <BaseBusinessTransactionDocumentID>{{ExternalCustomerInvoiceRequestExternalReference}}</BaseBusinessTransactionDocumentID>\n                <Name>My customer invoice with external payment</Name>\n                <!-- SettlementPriorityCode: \n                 1 = Immediate - create custom invoice, \n                 2 = Urgent - stop if a down payment exists\n                 3 = Normal - save invoice request with status \"to be invoiced\" -->\n                <SettlementPriorityCode>1</SettlementPriorityCode>\n                <ReferenceBusinessTransactionDocumentID>{{ExternalCustomerInvoiceRequestExternalReference}}</ReferenceBusinessTransactionDocumentID> <!-- External Reference -->\n                <BuyerParty>\n                    <InternalID>{{CustomerID}}</InternalID>\n                </BuyerParty>\n                <SalesUnitParty>\n                    <InternalID>{{SalesUnitID}}</InternalID>\n                </SalesUnitParty>\n                <CashDiscountTerms>\n                    <!-- 1001 = immediately net; 1006 = 10 days 5% -->\n                    <Code>1001</Code>\n                    <!-- <FullPaymentEndDate>2019-05-30</FullPaymentEndDate> -->\n                </CashDiscountTerms>\n                <PaymentControl>\n                    <!-- PaymentFormCode: 04 = Direct Debit, 20 = External Payment -->\n                    <PaymentFormCode>20</PaymentFormCode>\n                    <PaymentReferenceID>{{ExternalCustomerInvoicePaymentReferenceID}}</PaymentReferenceID>\n                    <!-- used to clear the payment -->\n                    <PaymentReferenceTypeCode>5</PaymentReferenceTypeCode>\n                    <PaymentServiceSubscriberID>{{CompanyID}}</PaymentServiceSubscriberID>\n                    <PaymentServiceCustomerID>{{CustomerID}}</PaymentServiceCustomerID>\n                    <ExternalPayment actionCode=\"01\">\n                        <!-- <UUID>?</UUID> -->\n                        <!-- Bank Account ID from UI screen My Bank >> View All >> Bank Accounts -->\n                        <HouseBankAccountKeyInternalID>{{HouseBankAccountID}}</HouseBankAccountKeyInternalID>\n                        <!-- House bank: 1000644 - ABN AMRO Bank -->\n                        <PaymentTransactionReferenceID>{{ExternalCustomerInvoicePaymentTransactionReferenceID}}</PaymentTransactionReferenceID>\n                        <DocumentDate>{{DocumentDate}}</DocumentDate>\n                        <ValueDate>{{ValueDate}}</ValueDate>\n                        <Amount currencyCode=\"USD\">1000</Amount>\n                    </ExternalPayment>\n                </PaymentControl>\n                <PricingTerms>\n                    <!-- PricingProcedureCode: PPGP02 = Standard Gross Procedure, PPSTD1 = Standard Procedure -->\n                    <PricingProcedureCode>PPGP02</PricingProcedureCode>\n                    <CurrencyCode>USD</CurrencyCode>\n                </PricingTerms>\n<!-- Invoice item | service product | tax code derived by system -->\n                <Item>\n                    <BaseBusinessTransactionDocumentItemID>10</BaseBusinessTransactionDocumentItemID>\n                    <!-- ReceivablesPropertyMovementDirectionCode: 1 = Credit memo item, 2 = Invoice item -->\n                    <ReceivablesPropertyMovementDirectionCode>2</ReceivablesPropertyMovementDirectionCode>\n                    <!-- <Description languageCode=\"EN\">My invoice item</Description> -->\n                    <CashDiscountDeductibleIndicator>false</CashDiscountDeductibleIndicator>\n                    <Product>\n                        <InternalID>{{ServiceProductID2}}</InternalID>\n                        <TypeCode>2</TypeCode>\n                    </Product>\n                    <Quantity unitCode=\"HUR\">10</Quantity>\n                    <QuantityTypeCode>TIME</QuantityTypeCode>\n                    <PriceAndTax>\n                        <!-- List Price -->\n                        <PriceComponent>\n                            <!-- TypeCode: 8PR1 = Gross list price, 7PR1 = Net list price -->\n                            <TypeCode>8PR1</TypeCode>\n                            <Rate>\n                                <DecimalValue>1200</DecimalValue>\n                                <CurrencyCode>USD</CurrencyCode>\n                                <BaseDecimalValue>10</BaseDecimalValue>\n                                <BaseMeasureUnitCode>HUR</BaseMeasureUnitCode>\n                            </Rate>\n                        </PriceComponent>\n                    </PriceAndTax>\n                    <ObjectNodeSenderTechnicalID>ITM_1</ObjectNodeSenderTechnicalID>\n                </Item>\n<!-- Credit memo item | free text -->\n                <Item>\n                    <BaseBusinessTransactionDocumentItemID>20</BaseBusinessTransactionDocumentItemID>\n                    <!-- ReceivablesPropertyMovementDirectionCode: 1 = Credit memo item, 2 = Invoice item -->\n                    <ReceivablesPropertyMovementDirectionCode>1</ReceivablesPropertyMovementDirectionCode>\n                    <Description languageCode=\"EN\">My free text invoice item</Description>\n                    <CashDiscountDeductibleIndicator>false</CashDiscountDeductibleIndicator>\n                    <Quantity unitCode=\"EA\">1</Quantity>\n                    <QuantityTypeCode>EA</QuantityTypeCode>\n                    <PriceAndTax>\n                        <!-- List Price -->\n                        <PriceComponent>\n                            <TypeCode>8PR1</TypeCode>\n                            <Rate>\n                                <DecimalValue>200.00</DecimalValue>\n                                <CurrencyCode>USD</CurrencyCode>\n                            </Rate>\n                        </PriceComponent>\n                    </PriceAndTax>\n                    <ProductTaxDetails>\n                        <ProductTaxationCharacteristicsCode listID=\"US\">500</ProductTaxationCharacteristicsCode>\n                    </ProductTaxDetails>\n                    <AccountingCodingBlockAssignment>\n                        <AccountingCodingBlock>\n                            <AccountingCodingBlockTypeCode>ACC</AccountingCodingBlockTypeCode>\n                            <GeneralLedgerAccountAliasCode>A-1700</GeneralLedgerAccountAliasCode>\n                        </AccountingCodingBlock>\n                    </AccountingCodingBlockAssignment>\n                    <ObjectNodeSenderTechnicalID>ITM_2</ObjectNodeSenderTechnicalID>\n                </Item>\n            </CustomerInvoiceRequest>\n        </glob:CustomerInvoiceRequestBundleMaintainRequest_sync>\n    </soapenv:Body>\n</soapenv:Envelope>"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/managecustomerinvoicerequesti4",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"bc",
										"srt",
										"scs",
										"sap",
										"managecustomerinvoicerequesti4"
									]
								}
							},
							"response": [
								{
									"name": "Create production proposal (Soap 1.1)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:glob=\"http://sap.com/xi/SAPGlobal20/Global\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <glob:CreateProductionProposal>\r\n         <CreateProductionPlanningOrder>\r\n            <SequenceNumber>1</SequenceNumber>\r\n            <SupplyPlanningAreaID>P1100</SupplyPlanningAreaID>\r\n            <MaterialID>P100101</MaterialID>\r\n            <!-- <ProductRequirementSpecificationID>?</ProductRequirementSpecificationID> -->\r\n            <MaterialAvailabilityDateTime timeZoneCode=\"CET\">2019-02-05T12:00:00.0000000Z</MaterialAvailabilityDateTime>\r\n            <Quantity unitCode=\"EA\">1</Quantity>\r\n            <QuantityTypeCode>EA</QuantityTypeCode>\r\n         </CreateProductionPlanningOrder>\r\n      </glob:CreateProductionProposal>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
										},
										"url": {
											"raw": "https://{{TenantHostname}}/sap/bc/srt/scs/sap/manageproductionproposalin",
											"protocol": "https",
											"host": [
												"{{TenantHostname}}"
											],
											"path": [
												"sap",
												"bc",
												"srt",
												"scs",
												"sap",
												"manageproductionproposalin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "content-type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "content-encoding",
											"value": "gzip"
										},
										{
											"key": "content-length",
											"value": "505"
										},
										{
											"key": "sap-system",
											"value": "KHL"
										},
										{
											"key": "www-authenticate",
											"value": "Basic realm=\"SAP NetWeaver Application Server [KHL/171][alias]\""
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=31536000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "<html>\n    <head>\n        <title>Logon Error Message</title>\n        <META http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n        <style type=\"text/css\">body { font-family:tahoma,helvetica,sans-serif;color:#333333;background-color:#FFFFFF; }td { font-family:tahoma,helvetica,sans-serif;font-size:70%;color:#333333; }h1 { font-family:tahoma,helvetica,sans-serif;font-size:160%;font-weight:bold;margin-top:15px;margin-bottom:3px;color:#003366; }h2 { font-family:verdana,helvetica,sans-serif;font-size:120%;font-style:italic;font-weight:bold;margin-top:6px;margin-bottom:6px;color:#999900; }p { font-family:tahoma,helvetica,sans-serif;color:#333333;margin-top:4px;margin-bottom:4px; }ul { font-family:tahoma,helvetica,sans-serif;color:#333333;list-style-type:square;margin-top:8px;margin-bottom:8px; }li { font-family:tahoma,helvetica,sans-serif;color:#33333;margin-top:4px; }.emphasize { color:#333333;background-color:#C8E3FF;padding:5px;}.note { color:#CC6600; }a { font-family:tahoma,helvetica,sans-serif;text-decoration:underline;color:#336699; }a:visited { color:#001166; }a:hover { text-decoration:none; }</style>\n    </head>\n    <body>\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n            <tr>\n                <td>\n                    <h1>Logon failed</h1>\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Get customer invoice request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CustomerInvoiceRequestObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"CustomerInvoiceRequestID\", jsonResponse.d.results[0].BaseBusinessTransactionDocumentID);",
											"",
											"// Validations",
											"pm.test(\"Customer invoice request \" + jsonResponse.d.results[0].BaseBusinessTransactionDocumentID + \" found\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Customer invoice request consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice item 1: \" + jsonResponse.d.results[0].Item[0].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[0].InvoicingStatusCode).to.eql(\"3\") });",
											"pm.test(\"Invoice item 2: \" + jsonResponse.d.results[0].Item[1].InvoicingStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].Item[1].InvoicingStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546de23c-d88a-4193-ac90-d23d098e2b99",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoicerequest/CustomerInvoiceRequestCollection?$format=json&$expand=Item,PaymentControl/PaymentControlExternalPayment&$filter=BaseBusinessTransactionDocumentID eq '{{CustomerInvoiceRequestID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoicerequest",
										"CustomerInvoiceRequestCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "Item,PaymentControl/PaymentControlExternalPayment"
										},
										{
											"key": "$filter",
											"value": "BaseBusinessTransactionDocumentID eq '{{CustomerInvoiceRequestID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query customer invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"CustomerInvoiceObjectID\", jsonResponse.d.results[0].ObjectID);",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results[0].ID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceQueryByElements2?NumberOfRows='20'&ItemBusinessTransactionDocumentReference_ID='{{CustomerInvoiceRequestID}}'&ItemBusinessTransactionDocumentReference_TypeCode='29'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceQueryByElements2"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_ID",
											"value": "'{{CustomerInvoiceRequestID}}'"
										},
										{
											"key": "ItemBusinessTransactionDocumentReference_TypeCode",
											"value": "'29'",
											"description": "29 = Customer invopice request"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get customer invoice (key access) and check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Customer invoice \" + jsonResponse.d.results.ID + \" retrieved\", function () { pm.expect(pm.response.code).to.be.oneOf([200,201,202]) });",
											"pm.test(\"Release status: \" + jsonResponse.d.results.ReleaseStatusCodeText, function () { pm.expect(jsonResponse.d.results.ReleaseStatusCode).to.eql(\"3\") });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')?$format=json&$expand=BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcustomerinvoice",
										"CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$expand",
											"value": "BusinessTransactionDocumentReference,InvolvedParty/InvolvedPartyDisplayName,InvolvedParty/InvolvedPartyFormattedAddress,CashDiscountTerms,PriceAndTaxCalculation,Item/ItemPriceAndTaxCalculation,Item/ItemBusinessTransactionDocumentReference,PaymentControl/ExternalPayment"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pre-confirm payments using clearing house statements",
					"item": [
						{
							"name": "Get payments in transfer and create clearing house statement file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(jsonResponse.d.__count + \" external payments found for company \" + pm.environment.get(\"CompanyID\") + \" and payment creation date \" + pm.environment.get(\"PaymentsSelectionDate\").substr(0,10), function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"",
											"// Create clearing house statement file from payment items",
											"let writer = eval(globals.ClearingHouseStatementWriter);",
											"writer.StartNewStatement();",
											"",
											"var paymentAmount = 0.00;",
											"var paymentCurrency = \"\";",
											"var paymentRef = \"\";",
											"",
											"var moment = require('moment');",
											"var statementDate = moment().add(0,'day').toISOString().substr(0,10);",
											"var paymentExecutionDate = moment().add(0,'day').toISOString().substr(0,10);",
											"",
											"// Loop payment items and create clearing house statement items",
											"console.log(\"- Start loop -\");",
											"var numberOfItems = Number(jsonResponse.d.__count);",
											"for (let index = 0; index < numberOfItems; index++) {",
											"    ",
											"    pm.test(\"Document: \" + jsonResponse.d.results[index].DocumentTypeCodeText + \" \" + jsonResponse.d.results[index].DocumentID, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"    pm.test(\"Business partner: \" + jsonResponse.d.results[index].BusinessPartnerID + \" \" + jsonResponse.d.results[index].BusinessPartnerName, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"    pm.test(\"Payment transaction: \" + jsonResponse.d.results[index].PaymentTransactionCategoryCodeText + \" \" + jsonResponse.d.results[index].PaymentTransactionGroupID, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"    pm.test(\"Payment amount: \" + jsonResponse.d.results[index].TransactionCurrencyAmount + \" \" + jsonResponse.d.results[index].TransactionCurrencyCode, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"",
											"    paymentAmount = jsonResponse.d.results[index].TransactionCurrencyAmount;",
											"    paymentCurrency = jsonResponse.d.results[index].TransactionCurrencyCode;",
											"    paymentRef = jsonResponse.d.results[index].PaymentTransactionGroupID;",
											"    console.log(\"Item index: \" + index + \" | Amount: \" + paymentAmount + \" \" + paymentCurrency);",
											"    console.log(\"Payment transaction reference: \" + paymentRef + \" | Customer name: \" + jsonResponse.d.results[index].BusinessPartnerName);",
											"    writer.AddItem(paymentRef, paymentAmount, paymentCurrency, paymentExecutionDate);",
											"}",
											"console.log(\"- End loop -\");",
											"",
											"// Set Clearing house statement ID",
											"let todayDateTime = (new Date()).toISOString().substr(0,19);",
											"todayDateTime = todayDateTime.replace(\"-\",\"\").replace(\"-\",\"\").replace(\"T\",\"\").replace(\":\",\"\").replace(\":\",\"\");",
											"var chsID = pm.environment.get(\"ExternalBillingDocPrefix\") + todayDateTime;",
											"pm.environment.set(\"ClearingHouseStatementID\", chsID);",
											"",
											"// Finalize clearing house statement file",
											"pm.environment.set(\"ClearingHouseStatementFile\", writer.Finalize(pm.environment.get(\"ClearingHouseStatementID\"), pm.environment.get(\"ClearingHouseAccountMerchantID\"), paymentCurrency, statementDate));",
											"",
											"console.log(\"Clearing House Statement File: \");",
											"console.log(pm.environment.get(\"ClearingHouseStatementFile\"));",
											"",
											"// Base64 encode the bank statement file string",
											"var cryptoJS = require(\"crypto-js\");",
											"var rawContent = cryptoJS.enc.Utf8.parse(pm.environment.get(\"ClearingHouseStatementFile\"));",
											"var base64Content = cryptoJS.enc.Base64.stringify(rawContent);",
											"pm.environment.set(\"ClearingHouseStatementFile-base64\", base64Content);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81136713-2039-47d6-8e37-0e7919c4abde",
										"exec": [
											"// Set payments filter date: today (format: 2019-05-15T00:00:00.0000000Z)",
											"let moment = require('moment');",
											"let paymentsDate = moment().add(0,'day').toISOString().substr(0,10) + \"T00:00:00.0000000Z\";",
											"pm.environment.set(\"PaymentsSelectionDate\", paymentsDate);",
											"",
											"// Functions to create Clearing House Statement file",
											"postman.setGlobalVariable(\"ClearingHouseStatementWriter\", function ClearingHouseStatementWriter() {",
											"    let writer = {};",
											"",
											"    writer.StartNewStatement = function StartNewStatement() {",
											"        //initializing variables",
											"        pm.globals.set(\"CHSItems\", \"\");",
											"        pm.globals.set(\"CHSItemTotalNumberValue\", 0);",
											"        pm.globals.set(\"CHSTotalAmount\", 0);",
											"    };",
											"    ",
											"",
											"    writer.AddItem = function AddItem(paymentRef, paymentAmount, paymentCurrency, paymentExecutionDate) {",
											"    ",
											"        // temlate for clearing house statement item",
											"        var itemXML = '  <!-- Payment item -->\\r\\n' +",
											"                      '  <PaymentOrderProcessingStatementItem>\\r\\n' +",
											"                      '    <!-- Type code: 350 = Credit Card Payment Confirmation -->\\r\\n' +",
											"                      '    <TypeCode>350</TypeCode>\\r\\n' +",
											"                      '    <PaymentReference>\\r\\n' +",
											"                      '      <ID>[paymentRef]</ID>\\r\\n' +",
											"                      '      <!-- Type code: 23 = Clearing House Payment Order -->\\r\\n' +",
											"                      '      <TypeCode>23</TypeCode>\\r\\n' +",
											"                      '    </PaymentReference>\\r\\n' +",
											"                      '    <!-- PropertyMovementDirectionCode: 1 = Credit, 2 = Debit -->\\r\\n' +",
											"                      '    <PropertyMovementDirectionCode>[propertyMovementDirectionCode]</PropertyMovementDirectionCode>\\r\\n' +",
											"                      '    <PaymentAmount currencyCode=\"[currencyCode]\">[paymentAmount]</PaymentAmount>\\r\\n' +",
											"                      '    <FeePercent>0</FeePercent>\\r\\n' +",
											"                      '    <!-- Transaction Date -->\\r\\n' +",
											"                      '    <PaymentExecutionDate>[paymentExecutionDate]</PaymentExecutionDate>\\r\\n' +",
											"                      '  </PaymentOrderProcessingStatementItem>\\r\\n';",
											"",
											"        // fill in values",
											"        itemXML = itemXML.replace('[paymentRef]', paymentRef);",
											"        itemXML = itemXML.replace('[paymentAmount]', Math.abs(paymentAmount));",
											"        itemXML = itemXML.replace('[currencyCode]', paymentCurrency);",
											"        itemXML = itemXML.replace('[paymentExecutionDate]', paymentExecutionDate);",
											"        if (paymentAmount >= 0) {",
											"            itemXML = itemXML.replace('[propertyMovementDirectionCode]', \"2\"); // debit item",
											"        }",
											"        if (paymentAmount < 0) {",
											"            itemXML = itemXML.replace('[propertyMovementDirectionCode]', \"1\"); // credit item",
											"        }",
											"",
											"        // add item to file",
											"        itemXML = pm.globals.get(\"CHSItems\") + itemXML;",
											"        pm.globals.set(\"CHSItems\", itemXML);",
											"        ",
											"        // check sums",
											"        pm.globals.set(\"CHSItemTotalNumberValue\", pm.globals.get(\"CHSItemTotalNumberValue\") + 1);",
											"        pm.globals.set(\"CHSTotalAmount\", pm.globals.get(\"CHSTotalAmount\") + paymentAmount * 1);",
											"    };",
											"",
											"    writer.Finalize = function Finalize(clearingHouseStatementID, companyClearingHouseID, currencyCode, statementDate) {",
											"        ",
											"        // add templates for envelope and header",
											"        var stmt = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\r\\n' + ",
											"                   '<PaymentOrderProcessingStatementNotification>\\r\\n' + ",
											"                   '  <!-- ID of the acquirer for this statement; expected in memo line of bank statement -->\\r\\n' + ",
											"                   '  <ID>[clearingHouseStatementID]</ID>\\r\\n' + ",
											"                   '  <ClearingHouseAccount>\\r\\n' + ",
											"                   '    <!-- Clearing house Merchant ID -->\\r\\n' + ",
											"                   '    <CompanyClearingHouseID>[companyClearingHouseID]</CompanyClearingHouseID>\\r\\n' + ",
											"                   '  </ClearingHouseAccount>\\r\\n' + ",
											"                   '  <!-- Type code: 1568 = Clearing House Payment Order Processing Statement -->\\r\\n' + ",
											"                   '  <TypeCode>1568</TypeCode>\\r\\n' + ",
											"                   '  <!-- Format code: 1 = Clearing House Statement -->\\r\\n' + ",
											"                   '  <FormatCode>1</FormatCode>\\r\\n' + ",
											"                   '  <ItemTotalNumberValue>[itemTotalNumberValue]</ItemTotalNumberValue>\\r\\n' + ",
											"                   '  <TotalAmount currencyCode=\"[currencyCode]\">[totalAmount]</TotalAmount>\\r\\n' + ",
											"                   '  <!-- Date when file was created by provider -->\\r\\n' + ",
											"                   '  <Date>[statementDate]</Date>\\r\\n' + ",
											"                   pm.globals.get(\"CHSItems\") + ",
											"                   '</PaymentOrderProcessingStatementNotification>';",
											"",
											"        // fill in values",
											"        stmt = stmt.replace(\"[clearingHouseStatementID]\", clearingHouseStatementID);",
											"        stmt = stmt.replace(\"[companyClearingHouseID]\", companyClearingHouseID);",
											"        stmt = stmt.replace(\"[itemTotalNumberValue]\", pm.globals.get(\"CHSItemTotalNumberValue\"));",
											"        stmt = stmt.replace(\"[currencyCode]\", currencyCode);",
											"        stmt = stmt.replace(\"[totalAmount]\", pm.globals.get(\"CHSTotalAmount\"));",
											"        stmt = stmt.replace(\"[statementDate]\", statementDate);",
											"",
											"        //clean-up",
											"        pm.globals.unset(\"CHSItems\");",
											"        pm.globals.unset(\"CHSItemTotalNumberValue\");",
											"        pm.globals.unset(\"CHSTotalAmount\");",
											"",
											"        //return file",
											"        return stmt;",
											"    };",
											"",
											"    return writer;",
											"",
											"} + '; ClearingHouseStatementWriter();');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khpayment/PaymentCollection?$format=json&$filter=CreationDateTime ge datetimeoffset'{{PaymentsSelectionDate}}'  and CompanyID eq '{{CompanyID}}' and PaymentFormCode eq '20' and PaymentTransactionStatusCode eq '4'&$expand=CompanyName,HouseBankAccount&$inlinecount=allpages",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khpayment",
										"PaymentCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "CreationDateTime ge datetimeoffset'{{PaymentsSelectionDate}}'  and CompanyID eq '{{CompanyID}}' and PaymentFormCode eq '20' and PaymentTransactionStatusCode eq '4'",
											"description": "Todays external payments in transfer"
										},
										{
											"key": "$expand",
											"value": "CompanyName,HouseBankAccount"
										},
										{
											"key": "$inlinecount",
											"value": "allpages"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"HouseBankUUID\", jsonResponse.d.results[0].HouseBankUUID);",
											"pm.environment.set(\"HouseBankAccountObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"House bank account found \" + jsonResponse.d.results[0].BankAccountID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountQueryByElements?NumberOfRows='20'&CompanyID='{{CompanyID}}'&LifeCycleStatusCode='3'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountQueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										},
										{
											"key": "LifeCycleStatusCode",
											"value": "'3'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CompanyPaymentFileRegisterObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Company payment file register for company \" + pm.environment.get(\"CompanyID\") + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/QueryByCompany?NumberOfRows='20'&CompanyID='{{CompanyID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"QueryByCompany"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Company payment file register and last inbound files for company \" + pm.environment.get(\"CompanyID\") + \" retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')?$expand=IncomingFile",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "IncomingFile"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create clearing house statement as incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"IncomingFileObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Clearing house statement created as inbound file\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"File ID: \" + jsonResponse.d.results.ID, function () { pm.response.to.have.status(201) });",
											"pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ParentObjectID\": \"{{CompanyPaymentFileRegisterObjectID}}\",\n\t\"HouseBankUUID\": \"{{HouseBankUUID}}\",\n\t\"ContentTypeCode\": \"6\",\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"External Billing - Clearing House Statement {{$timestamp}}\",\n\t\t\t\t\"Name\": \"B_Clearing_House_Statement_{{$timestamp}}.txt\",\n\t\t\t\t\"MimeType\": \"text/plain\",\n\t\t\t\t\"Binary\": \"{{ClearingHouseStatementFile-base64}}\"\n\t\t\t}\n\t\t]\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start payment update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"File upload of clearing house statement inbound file stated\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd91b58-00be-42d7-b851-ed2a9de347dd",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/StartPaymentUpdate?ObjectID='{{IncomingFileObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"StartPaymentUpdate"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{IncomingFileObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Incomming file retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\",\"4\",\"6\",\"7\"]) });",
											"//pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Incoming file status: Uploaded\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"//pm.test(\"Incoming file status: Released\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
											"//pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											"//pm.test(\"Incoming file status: In process\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"7\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74d5bf-5f46-47f2-a699-d12bf2ddc3da",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection('{{IncomingFileObjectID}}')?$expand=AttachmentFolder",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection('{{IncomingFileObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "AttachmentFolder"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ID eq '25'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirm payments using bank statements",
					"item": [
						{
							"name": "Get previous bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement found; Bank statement ID: \" + jsonResponse.d.results[0].ID, function () { pm.response.to.have.status(200) });",
											"",
											"// Persist data from last bank statement",
											"for (let index = 0; index < 1; index++)",
											"{ ",
											"    pm.environment.set(\"LastBankStatementID\", jsonResponse.d.results[0].ID);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceAmount\", jsonResponse.d.results[0].ClosingBalanceAmount);",
											"    pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", jsonResponse.d.results[0].CurrencyCode);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											"// Initialize variables of the last bank statement",
											"// These values apply if no bank statement has been posted before",
											"pm.environment.unset(\"LastBankStatementID\");",
											"pm.environment.set(\"LastBankStatementClosingBalanceAmount\", 0);",
											"pm.environment.set(\"LastBankStatementClosingBalanceCurrency\", \"USD\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '2'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						},
						{
							"name": "Get clearing house statement and create bank statement file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Clearing house statement \" + jsonResponse.d.results[0].ID + \" found\", function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"pm.test(\"Status: \" + jsonResponse.d.results[0].StatusCodeText, function() { pm.expect(jsonResponse.d.results[0].StatusCode).to.eql(\"2\") });",
											"pm.test(\"Total amount: \" + jsonResponse.d.results[0].TotalTransactionAmount + \" \" + jsonResponse.d.results[0].TotalTransactionAmountCurrencyCode, function() { pm.expect(jsonResponse.d.results[0].TotalTransactionAmountCurrencyCode).to.eql(\"USD\") });",
											"pm.test(\"External ID: \" + jsonResponse.d.results[0].ExternalID, function() { pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]) });",
											"",
											"",
											"// Create BAI2 bank statement file from open items",
											"let writer = eval(globals.BAI2StmtWriter);",
											"writer.StartNewStatement();",
											"",
											"// Loop open items and create bank statement lines",
											"var amountOnBankStatement = 0.00;",
											"var referenceOnBankStatement = \"\";",
											"var nameOnBankStatement = \"\";",
											"var numberOfItems = Number(jsonResponse.d.__count);",
											"console.log(\"- Start loop -\");",
											"for (let index = 0; index < numberOfItems; index++) {",
											"    amountOnBankStatement = jsonResponse.d.results[index].TotalTransactionAmount;",
											"    referenceOnBankStatement = jsonResponse.d.results[index].ExternalID;",
											"    nameOnBankStatement = pm.environment.get(\"ClearingHouseName\");",
											"",
											"    console.log(\"Open item index: \" + index + \" | Amount: \" + amountOnBankStatement);",
											"    console.log(\"External reference: \" + referenceOnBankStatement + \" | Customer name: \" + nameOnBankStatement);",
											"",
											"    //Add bank statement line items (12.50, \"R-20190430114408\", \"Luxury Heating & Cooling Co\")",
											"    //Transaction codes: 195 incoming cash transfer, 495 outgoing cash transfer, 399 miscellaneous credit, 699 miscellaneous debit, 166 ACH Settlement (credit), 466 ACH Settlement (debit)",
											"    // 1. External payment of sales order, allocation by external payment transaction reference ID",
											"    if (amountOnBankStatement >= 0) {",
											"        writer.AddIncomingTransaction(\"166\", amountOnBankStatement, referenceOnBankStatement, nameOnBankStatement);",
											"    }",
											"    // 2. Open item of customer return credit memo, allocation by credit memo external reference",
											"    if (amountOnBankStatement < 0) { ",
											"        writer.AddOutgoingTransaction(\"466\", amountOnBankStatement, referenceOnBankStatement, nameOnBankStatement);",
											"    }",
											"}",
											"console.log(\"- End loop -\");",
											"",
											"",
											"// Set bank statement date and convert date to BAI2 format YYMMDD",
											"var moment = require('moment');",
											"var today = moment.utc(pm.environment.get(\"$timestamp\"));",
											"console.log(\"Today's date: \" + today);",
											"console.log(\"Today's date (ISO): \" + today.toISOString());",
											"var year = (today.get('year') - 2000).toString();",
											"var month = (today.get('month') + 1).toString();",
											"if (month.length == 1) {",
											"    month = \"0\" + month;",
											"}",
											"var day = today.get('date').toString();",
											"if (day.length == 1) {",
											"    day = \"0\" + day;",
											"}",
											"var bankStatementDate = year + month + day;",
											"console.log(\"Bank statement date: \" + bankStatementDate);",
											"pm.environment.set(\"BankStatementDate\", bankStatementDate);",
											"",
											"// writer.Finalize = function Finalize(bankAccountId, stmtDate \"181211\", openingBalance 222.23)",
											"pm.environment.set(\"BAI2-BankStatementFile\", writer.Finalize(pm.environment.get(\"HouseBankAccountID\"), pm.environment.get(\"HouseBankRoutingID\"), bankStatementDate, parseFloat(pm.environment.get(\"LastBankStatementClosingBalanceAmount\"))));",
											"",
											"console.log(\"BAI2-file:\");",
											"console.log(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"",
											"// Base64 encode the bank statement file string",
											"var cryptoJS = require(\"crypto-js\");",
											"var rawContent = cryptoJS.enc.Utf8.parse(pm.environment.get(\"BAI2-BankStatementFile\"));",
											"var base64Content = cryptoJS.enc.Base64.stringify(rawContent);",
											"pm.environment.set(\"BAI2-BankStatementFile-base64\", base64Content);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81136713-2039-47d6-8e37-0e7919c4abde",
										"exec": [
											"// Functions to create BAI2 bank statement file",
											"postman.setGlobalVariable(\"BAI2StmtWriter\", function BAI2StmtWriter() {",
											"    let writer = {};",
											"",
											"    writer.StartNewStatement = function StartNewStatement() {",
											"        //initializing variables",
											"        pm.globals.set(\"BAI2Transactions\", \"\");",
											"        pm.globals.set(\"BAI2CounterAccountLines\", 0);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", 0);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", 0);",
											"        pm.globals.set(\"BAI2TotalsDebit\", 0);",
											"        pm.globals.set(\"BAI2TotalsCredit\", 0);",
											"    };",
											"    ",
											"    writer.AddIncomingTransaction = function AddIncomingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],0,0022640118XF,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] ORIG CO NAME=[customer]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[customer]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsCredit\", pm.globals.get(\"BAI2TotalsCredit\") + amount * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterCreditLines\", pm.globals.get(\"BAI2CounterCreditLines\") + 1);",
											"    };",
											"",
											"    writer.AddOutgoingTransaction = function AddOutgoingTransaction(transactionCode, amount, extRef, bpName) {",
											"    ",
											"        //template for record type 16 - transaction",
											"        //record type 88 and replace values",
											"        var trnsctn  = '16,[transactionCode],[amount],V,[date],,,,[invoice]/\\r\\n' +",
											"                       '88,YOUR REF=[invoice] BENEFICIARY=[bpName]/\\r\\n';",
											"    ",
											"        //fill in values for transaction",
											"        trnsctn = trnsctn.replace('[transactionCode]', transactionCode);",
											"        trnsctn = trnsctn.replace('[amount]', Math.abs(amount) * 100);",
											"        trnsctn = trnsctn.replace(/(\\[invoice\\])/g, extRef); //replace all, using regex",
											"        trnsctn = trnsctn.replace('[bpName]', bpName);",
											"        ",
											"        //add transaction to file",
											"        trnsctn = pm.globals.get(\"BAI2Transactions\") + trnsctn;",
											"        pm.globals.set(\"BAI2Transactions\", trnsctn);",
											"        ",
											"        //care for check sums",
											"        pm.globals.set(\"BAI2TotalsDebit\", pm.globals.get(\"BAI2TotalsDebit\") + Math.abs(amount) * 100);",
											"        pm.globals.set(\"BAI2CounterAccountLines\", pm.globals.get(\"BAI2CounterAccountLines\") + 2);",
											"        pm.globals.set(\"BAI2CounterDebitLines\", pm.globals.get(\"BAI2CounterDebitLines\") + 1);",
											"    };",
											"",
											"    writer.Finalize = function Finalize(bankAccountId, bankRoutingId, stmtDate, openingBalance) {",
											"        ",
											"        //add templates for missing templates and trailers",
											"        var stmt = \"01,10000002,SABBYD,[date],[time],[fileID],,,2/\\r\\n\" + ",
											"                   \"02,SAPBYD,[bankRoutingId],1,[date],[time],USD,/\\r\\n\" + ",
											"                   \"03,[bankAccId],USD,010,[openingBalance],,,015,[closingBalance],,,/\\r\\n\" + ",
											"                   \"88,100,[totalCredit],[lineCountCredit],,400,[totalDebit],[lineCountDebit],/\\r\\n\" + ",
											"                   pm.globals.get(\"BAI2Transactions\") + ",
											"                   \"49,0,[lineCountAccountLvl]/\\r\\n\" + ",
											"                   \"98,0,1,[lineCountGroupLvl]/\\r\\n\" + ",
											"                   \"99,0,1,[lineCountFileLvl]/\";",
											"        ",
											"        //take some variables local for better readibility",
											"        let totalCredit = pm.globals.get(\"BAI2TotalsCredit\");",
											"        let totalDebit = pm.globals.get(\"BAI2TotalsDebit\");",
											"        let lineCountAccountLvl = pm.globals.get(\"BAI2CounterAccountLines\");",
											"    ",
											"        //fill in values",
											"        stmt = stmt.replace(/(\\[date\\])/g, stmtDate);",
											"        stmt = stmt.replace(/(\\[time\\])/g, \"0730\"); //fix at first",
											"        stmt = stmt.replace(\"[fileID]\", \"1\"); //fix at first",
											"        stmt = stmt.replace(\"[bankRoutingId]\", bankRoutingId);",
											"        stmt = stmt.replace(\"[bankAccId]\", bankAccountId);",
											"        stmt = stmt.replace(\"[openingBalance]\", (Math.round(openingBalance * 100)).toString());",
											"        stmt = stmt.replace(\"[closingBalance]\", (Math.round((openingBalance * 100) + totalCredit - totalDebit)).toString());",
											"        stmt = stmt.replace(\"[totalCredit]\", Math.abs(totalCredit));",
											"        stmt = stmt.replace(\"[lineCountCredit]\", pm.globals.get(\"BAI2CounterCreditLines\"));",
											"        stmt = stmt.replace(\"[totalDebit]\", Math.abs(totalDebit));",
											"        stmt = stmt.replace(\"[lineCountDebit]\", pm.globals.get(\"BAI2CounterDebitLines\"));",
											"        stmt = stmt.replace(\"[lineCountAccountLvl]\", lineCountAccountLvl + 2); // plus header and trailer",
											"        stmt = stmt.replace(\"[lineCountGroupLvl]\", lineCountAccountLvl + 4);",
											"        stmt = stmt.replace(\"[lineCountFileLvl]\", lineCountAccountLvl + 6);",
											"    ",
											"        //clean-up",
											"        pm.globals.unset(\"BAI2Transactions\");",
											"        pm.globals.unset(\"BAI2CounterFileLines\");",
											"        pm.globals.unset(\"BAI2CounterGroupLines\");",
											"        pm.globals.unset(\"BAI2CounterAccountLines\");",
											"        pm.globals.unset(\"BAI2CounterDebitLines\");",
											"        pm.globals.unset(\"BAI2CounterCreditLines\");",
											"        pm.globals.unset(\"BAI2TotalsDebit\");",
											"        pm.globals.unset(\"BAI2TotalsCredit\");",
											"        ",
											"        //return file",
											"        return stmt;",
											"",
											"    };",
											"",
											"    return writer;",
											"",
											"} + '; BAI2StmtWriter();');",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khpaymentorderprocessingstatement/PaymentOrderProcessingStatementCollection?$format=json&$filter=ExternalID eq '{{ClearingHouseStatementID}}'&$expand=CompanyName&$inlinecount=allpages",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khpaymentorderprocessingstatement",
										"PaymentOrderProcessingStatementCollection"
									],
									"query": [
										{
											"key": "$format",
											"value": "json"
										},
										{
											"key": "$filter",
											"value": "ExternalID eq '{{ClearingHouseStatementID}}'"
										},
										{
											"key": "$expand",
											"value": "CompanyName"
										},
										{
											"key": "$inlinecount",
											"value": "allpages"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"HouseBankUUID\", jsonResponse.d.results[0].HouseBankUUID);",
											"pm.environment.set(\"HouseBankAccountObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"House bank account found \" + jsonResponse.d.results[0].BankAccountID + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountQueryByElements?NumberOfRows='20'&CompanyID='{{CompanyID}}'&LifeCycleStatusCode='3'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountQueryByElements"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										},
										{
											"key": "LifeCycleStatusCode",
											"value": "'3'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get house bank account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"House bank account details retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankaccount/HouseBankAccountCollection('{{HouseBankAccountObjectID}}')?$expand=Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankaccount",
										"HouseBankAccountCollection('{{HouseBankAccountObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Description,HouseBank,HouseBank/BankDirectoryEntry,HouseBank/BankDirectoryEntry/BankDirectoryEntryBranch,HouseBank/BankDirectoryEntry/NationalBankIdentification"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"pm.environment.set(\"CompanyPaymentFileRegisterObjectID\", jsonResponse.d.results[0].ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Company payment file register for company \" + pm.environment.get(\"CompanyID\") + \" found\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/QueryByCompany?NumberOfRows='20'&CompanyID='{{CompanyID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"QueryByCompany"
									],
									"query": [
										{
											"key": "NumberOfRows",
											"value": "'20'"
										},
										{
											"key": "StartRow",
											"value": "'5'",
											"disabled": true
										},
										{
											"key": "CompanyID",
											"value": "'{{CompanyID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company payment file register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Company payment file register and last inbound files for company \" + pm.environment.get(\"CompanyID\") + \" retrieved\", function () { pm.response.to.have.status(200) });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')?$expand=IncomingFile",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"CompanyPaymentFileRegisterCollection('{{CompanyPaymentFileRegisterObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "IncomingFile"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create bank statement as incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"IncomingFileObjectID\", jsonResponse.d.results.ObjectID);",
											"",
											"// Validations",
											"pm.test(\"Bank statement created as inbound file\", function () { pm.response.to.have.status(201) });",
											"pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\t\n\t\"ParentObjectID\": \"{{CompanyPaymentFileRegisterObjectID}}\",\n\t\"HouseBankUUID\": \"{{HouseBankUUID}}\",\n\t\"ContentTypeCode\": \"1\",\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"External Billing - Bank Statement {{$timestamp}}\",\n\t\t\t\t\"Name\": \"B_BAI2_Bank_Statement_{{$timestamp}}.txt\",\n\t\t\t\t\"MimeType\": \"text/plain\",\n\t\t\t\t\"Binary\": \"{{BAI2-BankStatementFile-base64}}\"\n\t\t\t}\n\t\t]\n}"
								},
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start payment update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"// Validations",
											"pm.test(\"File upload of bank statement inbound file stated\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd91b58-00be-42d7-b851-ed2a9de347dd",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "{{x-csrf-token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/StartPaymentUpdate?ObjectID='{{IncomingFileObjectID}}'",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"StartPaymentUpdate"
									],
									"query": [
										{
											"key": "ObjectID",
											"value": "'{{IncomingFileObjectID}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get incoming file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validations",
											"pm.test(\"Incomming file retrieved\", function () { pm.response.to.have.status(200) });",
											"pm.test(\"Incoming file status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\",\"4\",\"6\",\"7\"]) });",
											"//pm.test(\"Incoming file status: New\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Incoming file status: Uploaded\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"2\") });",
											"//pm.test(\"Incoming file status: Released\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
											"//pm.test(\"Incoming file status: Finished\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"6\") });",
											"//pm.test(\"Incoming file status: In process\", function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"7\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74d5bf-5f46-47f2-a699-d12bf2ddc3da",
										"exec": [
											"// Delay request\r",
											"setTimeout(function() {}, 3000); // wait 3 sec\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"value": "fetch"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcompanypaymentfileregister/IncomingFileCollection('{{IncomingFileObjectID}}')?$expand=AttachmentFolder",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khcompanypaymentfileregister",
										"IncomingFileCollection('{{IncomingFileObjectID}}')"
									],
									"query": [
										{
											"key": "$expand",
											"value": "AttachmentFolder"
										},
										{
											"key": "$select",
											"value": "IncomingFile/HouseBankUUID",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ID eq '25'",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get bank statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4530b231-dcf4-4213-a5b0-ddc302f05671",
										"exec": [
											"var jsonResponse = pm.response.json();",
											"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
											"",
											"// Validate response",
											"pm.test(\"Bank statement \" + jsonResponse.d.results[0].ID + \" retrieved\", function () { pm.response.to.have.status(200) });",
											"let bankStatementID = +pm.environment.get(\"LastBankStatementID\") + 1; // '+' converts string to integer",
											"pm.test(\"Bank statement ID ... ok\", function () { pm.expect(jsonResponse.d.results[0].ID).to.eql(bankStatementID.toString()) });",
											"pm.test(\"Opening balance amount ... ok\", function () { pm.expect(jsonResponse.d.results[0].OpeningBalanceAmount).to.eql(pm.environment.get(\"LastBankStatementClosingBalanceAmount\")) });",
											"",
											"pm.test(\"Bank statement status: \" + jsonResponse.d.results[0].LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.be.oneOf([\"1\",\"2\"]) });",
											"//pm.test(\"Bank statement status: In preparation\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"1\") });",
											"//pm.test(\"Bank statement status: Posted\", function () { pm.expect(jsonResponse.d.results[0].LifeCycleStatusCode).to.eql(\"2\") });",
											"",
											"pm.test(\"Post processing: \" + jsonResponse.d.results[0].OverallPostprocessingCodeText, function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.be.oneOf([\"1\",\"2\",\"4\"]) });",
											"//pm.test(\"Postprocessing: Not relevant\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"4\") });",
											"//pm.test(\"Postprocessing: In Process\", function () { pm.expect(jsonResponse.d.results[0].OverallPostprocessingCode).to.eql(\"2\") });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3104f97-6b51-45d9-b75c-e93d5dbf90a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-csrf-token",
										"type": "text",
										"value": "fetch"
									}
								],
								"url": {
									"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khhousebankstatement/HouseBankStatementCollection?$filter=HouseBankAccountID eq '{{HouseBankAccountID}}'&$format=json&$orderby=ValidityYear desc, ID desc&$top=1",
									"protocol": "https",
									"host": [
										"{{TenantHostname}}"
									],
									"path": [
										"sap",
										"byd",
										"odata",
										"cust",
										"v1",
										"khhousebankstatement",
										"HouseBankStatementCollection"
									],
									"query": [
										{
											"key": "$filter",
											"value": "HouseBankAccountID eq '{{HouseBankAccountID}}'",
											"description": "ValidityYear eq '{{FiscalYear}}' and HouseBankAccountID eq '{{HouseBankAccountID}}'"
										},
										{
											"key": "$format",
											"value": "json",
											"description": "HouseBankAccountID eq '{{HouseBankAccountID}}' and LifeCycleStatusCode eq '5'"
										},
										{
											"key": "$orderby",
											"value": "ValidityYear desc, ID desc"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								},
								"description": "Request predecessor bank statement to get closing balance and date."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invoice Attachments",
			"item": [
				{
					"name": "Get Invoice Attachments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')/CustomerInvoiceAttachmentFolder?$format=json",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khcustomerinvoice",
								"CustomerInvoiceCollection('{{CustomerInvoiceObjectID}}')",
								"CustomerInvoiceAttachmentFolder"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Invoice Attachment",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khcustomerinvoice/CustomerInvoiceAttachmentFolderCollection('{{AttachmentObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khcustomerinvoice",
								"CustomerInvoiceAttachmentFolderCollection('{{AttachmentObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Invoice Attachment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ParentObjectID\": \"{{CustomerInvoiceObjectID}}}}\",\n    \"Name\": \"test4.txt\",\n    \"MimeType\": \"text/plain\",\n    \"Binary\": \"dGVzdCBmaWxlIGF0dGFjaG1lbnQ=\",\n    \"OutputRelevanceIndicator\": true,\n    \"Title\": \"test4.txt\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{TenantHostname}}khcustomerinvoice/CustomerInvoiceAttachmentFolderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}khcustomerinvoice"
							],
							"path": [
								"CustomerInvoiceAttachmentFolderCollection"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order using nested create",
			"item": [
				{
					"name": "Get collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b5f4d9c-55db-4cb2-a6b6-ffc9e31c7d2b",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "25c89d78-824a-437d-b5fc-b234e9389390",
								"type": "text/javascript",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$metadata?sap-label=true&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$metadata"
							],
							"query": [
								{
									"key": "sap-label",
									"value": "true"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales order (nested create)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Get sales order ID and set variable for filtering",
									"//var jsonResponse = xml2Json(responseBody);",
									"//console.log(jsonResponse);",
									"//var jsonResponseData = JSON.parse(jsonResponse);",
									"//console.log(jsonResponse['d:\"http://schemas.microsoft.com/ado/2007/08/dataservices\"']['m:\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"'].entry.content['m:properties']['d:ID']);",
									"//pm.environment.set(\"ID\", jsonResponseData.entry.content.properties.ID);",
									"",
									"//var jsonRequest = pm.request.json();",
									"var jsonRequest = JSON.parse(request.data);",
									"//console.log(jsonRequest.BuyerID);",
									"pm.environment.set(\"SalesOrderExternalReference\", jsonRequest.ExternalReference);",
									"",
									"// Validations",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"pm.test(\"201 - Sales order created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Set External Reference of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}\",\n\t\"Name\": \"Sample Sales Order (OData Nested Create)\",\n\t\"DataOriginTypeCode\": \"4\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID2}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": false\n\t\t},\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ProcessingTypeCode\": \"TAN\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ID\": \"20\",\n\t\t\t\t\"ProcessingTypeCode\": \"TASC\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{ServiceProductID}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"HUR\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order and expand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"//pm.environment.set(\"BuyerPartyObjectID\", jsonResponse.d.results[0].SalesOrderBuyerParty.ObjectID);",
									"//pm.environment.set(\"PricingTermsObjectID\", jsonResponse.d.results[0].SalesOrderPricingTerms.ObjectID);",
									"//pm.environment.set(\"ItemProductObjectID\", jsonResponse.d.results[0].SalesOrderItem[0].SalesOrderItemProduct.ObjectID);",
									"//pm.environment.set(\"ItemScheduleLineObjectID\", jsonResponse.d.results[0].SalesOrderItem[0].SalesOrderItemScheduleLine[0].ObjectID);",
									"",
									"// Validations",
									"pm.test(\"201 - Sales order data returned\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Check Pricing Terms\", function () { pm.expect(jsonResponse.d.results[0].PricingTerms.CurrencyCode).to.eql(\"EUR\") });",
									"pm.test(\"Item 10 created\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									"pm.test(\"Item 20 created\", function () { pm.expect(jsonResponse.d.results[0].Item[1].ID).to.eql(\"20\") });",
									"pm.test(\"Sales Order consistent\", function () { pm.expect(jsonResponse.d.results[0].ConsistencyStatusCodeText).to.eql(\"Consistent\") });",
									"pm.test(\"Sales Order released\", function () { pm.expect(jsonResponse.d.results[0].ReleaseStatusCodeText).to.eql(\"Not Released\") });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=ExternalReference eq '{{SalesOrderExternalReference}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								},
								{
									"key": "$filter",
									"value": "ExternalReference eq '{{SalesOrderExternalReference}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Release customer request (submit internet order)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b50fcc9-9d81-49c6-afe7-adf9c96a8a5d",
								"type": "text/javascript",
								"exec": [
									"// Validations",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"pm.test(\"200 - Customer request released\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderReleaseCustomerRequest2?ObjectID='{{SalesOrderObjectID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderReleaseCustomerRequest2"
							],
							"query": [
								{
									"key": "ObjectID",
									"value": "'{{SalesOrderObjectID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Release sales order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b54faab5-424f-444a-9ce5-6aa8297099ad",
								"type": "text/javascript",
								"exec": [
									"// Validations",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"pm.test(\"200 - Sales order released\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderRelease3?ObjectID='{{SalesOrderObjectID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderRelease3"
							],
							"query": [
								{
									"key": "ObjectID",
									"value": "'{{SalesOrderObjectID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order (expand and select)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7288997b-8a67-4eda-a761-852bea77f42f",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"// Validations",
									"pm.test(\"201 - Sales order data returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Sales Order consistent\", function () {",
									"    pm.expect(jsonResponse.d.results[0].ConsistencyStatusCodeText).to.eql(\"Consistent\");",
									"});",
									"pm.test(\"Sales Order released\", function () {",
									"    pm.expect(jsonResponse.d.results[0].ReleaseStatusCodeText).to.eql(\"Released\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=Item&$filter=ExternalReference eq '{{SalesOrderExternalReference}}'&$select=ExternalReference,ObjectID,ID,Name,ReleaseStatusCode,ReleaseStatusCodeText,ConsistencyStatusCode,ConsistencyStatusCodeText,Item/ID,Item/ObjectID,Item/ReleaseStatusCode,Item/ReleaseStatusCodeText,Item/ExecutionReleaseStatusCode,Item/ExecutionReleaseStatusCodeText",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "Item"
								},
								{
									"key": "$filter",
									"value": "ExternalReference eq '{{SalesOrderExternalReference}}'"
								},
								{
									"key": "$select",
									"value": "ExternalReference,ObjectID,ID,Name,ReleaseStatusCode,ReleaseStatusCodeText,ConsistencyStatusCode,ConsistencyStatusCodeText,Item/ID,Item/ObjectID,Item/ReleaseStatusCode,Item/ReleaseStatusCodeText,Item/ExecutionReleaseStatusCode,Item/ExecutionReleaseStatusCodeText"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "62e7970b-a897-41c8-8ea8-f2ce155983ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f356b732-53d3-44dd-b61c-4a9c42181a1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order using batch",
			"item": [
				{
					"name": "Get collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "157c5a67-4e10-4ebe-a5c5-44f1a37e03db",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ba446ed-9def-4127-b41f-1114dbf92652",
								"type": "text/javascript",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$metadata?sap-label=true&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$metadata"
							],
							"query": [
								{
									"key": "sap-label",
									"value": "true"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2 sales orders + get (batch)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bc87aee-2d90-451f-aaf1-2cb391af6300",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "480884b9-6708-4048-a355-2bc5d209de37",
								"exec": [
									"// Set External Reference of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/mixed; boundary=batch_1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n--batch_1\nContent-Type: multipart/mixed; boundary=changeset_2\n\n--changeset_2\nContent-Type: application/http \nContent-Transfer-Encoding: binary\n\nPOST SalesOrderCollection HTTP/1.1\nContent-Type: application/json\nContent-ID: 1\nContent-Length: 10000\nAccept: application/json\n\n{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}-1\",\n\t\"Name\": \"Sample Sales Order 1 (batch)\",\n\t\"DataOriginTypeCode\": \"1\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID2}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": false\n\t\t},\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ProcessingTypeCode\": \"TAN\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ID\": \"20\",\n\t\t\t\t\"ProcessingTypeCode\": \"TASC\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{ServiceProductID}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"HUR\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t\n\n--changeset_2\nContent-Type: application/http \nContent-Transfer-Encoding: binary\n\nPOST SalesOrderCollection HTTP/1.1\nContent-Type: application/json\nContent-ID: 1\nContent-Length: 10000\nAccept: application/json\n\n{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}-2\",\n\t\"Name\": \"Sample Sales Order 2 (batch)\",\n\t\"DataOriginTypeCode\": \"1\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID2}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": false\n\t\t},\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ID\": \"20\",\n\t\t\t\t\"ProcessingTypeCode\": \"TASC\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{ServiceProductID}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"HUR\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t\n\n--changeset_2--\n\n\n--batch_1\nContent-Type: application/http\nContent-Transfer-Encoding: binary\n\nGET SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=startswith(ExternalReference,'{{SalesOrderExternalReference}}') HTTP/1.1\n\n\n--batch_1--"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$batch",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$batch"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order node by node",
			"item": [
				{
					"name": "Get metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75577150-4aaa-4880-9ee4-c206aee1d3c9",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$metadata?sap-label=true&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$metadata"
							],
							"query": [
								{
									"key": "sap-label",
									"value": "true"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales order root",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "510deefb-6650-4ff1-818e-7b70d0162e4e",
								"exec": [
									"// Set environment variables",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results.ID);",
									"",
									"// Validations",
									"pm.test(\"Sales order root created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0eff683-5300-451e-8bde-426c08cceb24",
								"exec": [
									"// Set External Reference of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}\",\n\t\"Name\": \"Sample Sales Order (OData node-by-code create)\",\n\t\"DataOriginTypeCode\": \"4\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order and expand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e071df17-ad9b-4808-8547-98437a761e18",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"BuyerPartyObjectID\", jsonResponse.d.results[0].BuyerParty.ObjectID);",
									"pm.environment.set(\"PricingTermsObjectID\", jsonResponse.d.results[0].PricingTerms.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty,SalesUnitParty,PricingTerms&$filter=ID eq '{{SalesOrderID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty,SalesUnitParty,PricingTerms"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales unit party",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dde7e485-8849-4a24-826f-43f26685ebd8",
								"exec": [
									"// Validations",
									"pm.test(\"Sales unit party created ... ok\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderObjectID}}\",\n\t\"PartyID\": \"{{SalesUnitID}}\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesUnitPartyCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesUnitPartyCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update buyer party",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0750ddd8-3d86-4603-b475-1165717da398",
								"exec": [
									"// Validations",
									"pm.test(\"Buyer party added ... ok\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "x-http-method",
								"value": "MERGE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{BuyerPartyObjectID}}\",\n\t\"PartyID\": \"{{CustomerID2}}\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/BuyerPartyCollection('{{BuyerPartyObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"BuyerPartyCollection('{{BuyerPartyObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update pricing terms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b06e8088-66a6-4a89-9b1c-424f08d0c06f",
								"exec": [
									"// Validations",
									"pm.test(\"Update pricing terms ... ok\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "x-http-method",
								"value": "MERGE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{PricingTermsObjectID}}\",\n\t\"CurrencyCode\": \"EUR\",\n\t\"GrossAmountIndicator\": false\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PricingTermsCollection('{{PricingTermsObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PricingTermsCollection('{{PricingTermsObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c85e789f-be4f-43ed-abf7-44ea3fd269a9",
								"exec": [
									"// Validations",
									"pm.test(\"Item created ... ok\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderObjectID}}\",\n\t\"ID\": \"10\",\n\t\"ProcessingTypeCode\": \"TAN\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order and expand (with item)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b157ad3-df67-485e-b51a-5dd326cc1ca3",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"BuyerPartyObjectID\", jsonResponse.d.results[0].BuyerParty.ObjectID);",
									"pm.environment.set(\"PricingTermsObjectID\", jsonResponse.d.results[0].PricingTerms.ObjectID);",
									"pm.environment.set(\"ItemProductObjectID\", jsonResponse.d.results[0].Item[0].ItemProduct.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=ID eq '{{SalesOrderID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8561c32-35c9-4a9c-b67d-e480cdee725e",
								"exec": [
									"// Validations",
									"pm.test(\"Update item product\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "x-http-method",
								"value": "MERGE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{ItemProductObjectID}}\",\n\t\"ProductID\": \"P100401\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemProductCollection('{{ItemProductObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemProductCollection('{{ItemProductObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order and expand (with item schedule line)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb97c99-ddff-4b47-bc6e-ccb21ce40084",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"BuyerPartyObjectID\", jsonResponse.d.results[0].BuyerParty.ObjectID);",
									"pm.environment.set(\"PricingTermsObjectID\", jsonResponse.d.results[0].PricingTerms.ObjectID);",
									"pm.environment.set(\"ItemProductObjectID\", jsonResponse.d.results[0].Item[0].ItemProduct.ObjectID);",
									"pm.environment.set(\"ItemScheduleLineObjectID\", jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].ObjectID);",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=ID eq '{{SalesOrderID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item schedule line",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6c00b8e-9b04-4ea8-ba2e-2e1ba543a9b1",
								"exec": [
									"// Validations",
									"pm.test(\"Update item quantity\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "x-http-method",
								"value": "MERGE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{ItemScheduleLineObjectID}}\",\n\t\"Quantity\": \"3\",\n\t\"unitCode\": \"EA\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemScheduleLineCollection('{{ItemScheduleLineObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemScheduleLineCollection('{{ItemScheduleLineObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Release customer request (submit internet order)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "x-http-method",
								"value": "MERGE",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderReleaseCustomerRequest2?ObjectID='{{SalesOrderObjectID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderReleaseCustomerRequest2"
							],
							"query": [
								{
									"key": "ObjectID",
									"value": "'{{SalesOrderObjectID}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order and expand all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb97c99-ddff-4b47-bc6e-ccb21ce40084",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"BuyerPartyObjectID\", jsonResponse.d.results[0].BuyerParty.ObjectID);",
									"pm.environment.set(\"PricingTermsObjectID\", jsonResponse.d.results[0].PricingTerms.ObjectID);",
									"pm.environment.set(\"ItemProductObjectID\", jsonResponse.d.results[0].Item[0].ItemProduct.ObjectID);",
									"pm.environment.set(\"ItemScheduleLineObjectID\", jsonResponse.d.results[0].Item[0].ItemScheduleLine[0].ObjectID);",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=ID eq '{{SalesOrderID}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty,SalesUnitParty,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c81c315c-2066-46ea-ac66-e3c7f926a7cc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6e1cce4e-1bd6-47a3-bcd9-781db596a27c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order with Attachments",
			"item": [
				{
					"name": "Get metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43002d5b-0c70-4769-8278-9de67558d992",
								"type": "text/javascript",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$metadata?sap-label=true&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$metadata"
							],
							"query": [
								{
									"key": "sap-label",
									"value": "true"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales order with attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21ff1eaa-b09f-4001-9117-e791b4adef1a",
								"exec": [
									"// Get sales order ID and set variable for filtering",
									"//var jsonResponse = xml2Json(responseBody);",
									"//console.log(jsonResponse);",
									"//var jsonResponseData = JSON.parse(jsonResponse);",
									"//console.log(jsonResponse['d:\"http://schemas.microsoft.com/ado/2007/08/dataservices\"']['m:\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"'].entry.content['m:properties']['d:ID']);",
									"//pm.environment.set(\"ID\", jsonResponseData.entry.content.properties.ID);",
									"",
									"//var jsonRequest = pm.request.json();",
									"var jsonRequest = JSON.parse(request.data);",
									"//console.log(jsonRequest.BuyerID);",
									"pm.environment.set(\"SalesOrderExternalReference\", jsonRequest.ExternalReference);",
									"",
									"// Validations",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
									"});",
									"pm.test(\"201 - Sales order with attachments created\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff990dde-5b63-43bc-ac00-0fa57b2996c3",
								"exec": [
									"// Set BuyerID of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}\",\n\t\"Name\": \"Sample Sales Order with attachments\",\n\t\"DataOriginTypeCode\": \"1\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": false\n\t\t},\n\t\"AttachmentFolder\": \n\t\t[\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\"TypeCode\": \"10076\",\n\t\t\t\t\"Title\": \"Image of Document\",\n\t\t\t\t\"OutputRelevanceIndicator\": true,\n\t\t\t\t\"Name\": \"Document_1.jpg\",\n\t\t\t\t\"MimeType\": \"image/jpg\",\n\t\t\t\t\"Binary\": \"\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CategoryCode\": \"3\",\n\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\"Title\": \"SAP Business ByDesign product page\",\n\t\t\t\t\"Name\": \"SAP Business ByDesign product page\",\n\t\t\t\t\"LinkWebURI\": \"https://www.sap.com/products/business-bydesign.html\"\n\t\t\t}\n\t\t],\t\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ProcessingTypeCode\": \"TAN\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\"ItemAttachmentFolder\": \n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"CategoryCode\": \"2\",\n\t\t\t\t\t\t\t\"TypeCode\": \"10001\",\n\t\t\t\t\t\t\t\"Title\": \"Image of Icecream\",\n\t\t\t\t\t\t\t\"OutputRelevanceIndicator\": false,\n\t\t\t\t\t\t\t\"Name\": \"Product_Icecream.jpg\",\n\t\t\t\t\t\t\t\"MimeType\": \"image/jpg\",\n\t\t\t\t\t\t\t\"Binary\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ID\": \"20\",\n\t\t\t\t\"ProcessingTypeCode\": \"TASC\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{ServiceProductID}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"HUR\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							]
						},
						"description": "Data Origin Type Code: 1 - Manual data entry, 4 - Internet order.\n\nAttachment Category Codes: 2 - Document, 3 - Link.\n\nAttachment Type Codes: 10076 - Pro Forma Invoice, 10001 - Standard Attachment.\n\nAttachment binaries are base64 encoded."
					},
					"response": []
				},
				{
					"name": "Get sales order and expand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70784133-1e3f-4485-b3a0-2581bbae4d18",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"//console.log(jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"pm.environment.set(\"AttachmentObjectID\", jsonResponse.d.results[0].Item[0].ItemAttachmentFolder[0].ObjectID);",
									"",
									"// Validations",
									"pm.test(\"201 - Sales order data returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Pricing Terms\", function () {",
									"    pm.expect(jsonResponse.d.results[0].PricingTerms.CurrencyCode).to.eql(\"EUR\");",
									"});",
									"pm.test(\"Check Item 10\", function () {",
									"    pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\");",
									"});",
									"pm.test(\"Check Item 20\", function () {",
									"    pm.expect(jsonResponse.d.results[0].Item[1].ID).to.eql(\"20\");",
									"});",
									"pm.test(\"Sales Order consistent\", function () {",
									"    pm.expect(jsonResponse.d.results[0].ConsistencyStatusCodeText).to.eql(\"Consistent\");",
									"});",
									"pm.test(\"Sales Order Released\", function () {",
									"    pm.expect(jsonResponse.d.results[0].ReleaseStatusCodeText).to.eql(\"Not Released\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,AttachmentFolder,Item/ItemAttachmentFolder&$filter=ExternalReference eq '{{SalesOrderExternalReference}}'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine,AttachmentFolder,Item/ItemAttachmentFolder"
								},
								{
									"key": "$filter",
									"value": "ExternalReference eq '{{SalesOrderExternalReference}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get item attachment (key access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f134c15-adc5-42cf-938e-e778a244bfa6",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"AttachmentObjectID\", jsonResponse.d.results.ObjectID);",
									"//console.log(jsonResponse.d.results[0].ID);",
									"",
									"// Validations",
									"pm.test(\"200 - Attachment returned\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemAttachmentFolderCollection('{{AttachmentObjectID}}')?$format=json",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemAttachmentFolderCollection('{{AttachmentObjectID}}')"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3cde6c0-cfa4-420a-a56f-b64abc5a60f6",
								"exec": [
									"// Validations",
									"pm.test(\"204 - Attachment deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							},
							{
								"key": "x-http-method",
								"value": "DELETE",
								"disabled": true
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemAttachmentFolderCollection('{{AttachmentObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemAttachmentFolderCollection('{{AttachmentObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9920369-b0a3-4ca6-af69-beb6640eaa9f",
								"exec": [
									"// Validations",
									"pm.test(\"Successful POST request - Attachment added\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemObjectID}}\",\n\t\"CategoryCode\": \"2\",\n\t\"TypeCode\": \"10001\",\n\t\"Title\": \"Image of sport shoes (added)\",\n\t\"OutputRelevanceIndicator\": true,\n\t\"Name\": \"Product_Shoes.jpg\",\n\t\"MimeType\": \"image/jpg\",\n\t\"Binary\": \"\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemAttachmentFolderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemAttachmentFolderCollection"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0d4d74bf-ff74-4dcb-9608-3391963d2496",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3857f6d0-4d7c-4b47-a658-a13155b06109",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order with price components (net)",
			"item": [
				{
					"name": "Get xsrf-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"Cross-site request forgery token received\", function () { pm.response.to.have.header(\"x-csrf-token\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2e8f837-8860-4a09-9931-7d6db97f5cdf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales order with net pricing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results.ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results.UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results.ID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results.ID + \" created\", function () { pm.response.to.have.status(201) });",
									"pm.test(\"Consistency status: \" + jsonResponse.d.results.ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
									"pm.test(\"Lifecycle  status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Set External Reference of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}\",\n\t\"Name\": \"Sample Sales Order with price components (net)\",\n\t\"DataOriginTypeCode\": \"1\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID2}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": false\n\t\t},\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ProcessingTypeCode\": \"TAN\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order with item price components",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"//pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Loop price components and get list price component",
									"pm.environment.set(\"SalesOrderItemPriceComponentObjectID\", null);",
									"let numberOfItems = Number(jsonResponse.d.__count);",
									"for (let index = 0; index < numberOfItems; index++) {",
									"    if (jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ItemPriceComponent[index].TypeCode == '7PR1') {",
									"        pm.environment.set(\"SalesOrderItemPriceComponentObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ItemPriceComponent[index].ObjectID);",
									"    }",
									"}",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,Item/ItemPriceAndTaxCalculation/ItemPriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation&$inlinecount=allpages",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,Item/ItemPriceAndTaxCalculation/ItemPriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation"
								},
								{
									"key": "$inlinecount",
									"value": "allpages"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item tax code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Tax code updated\", function () { pm.response.to.have.status(204) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n\t\"ParentObjectID\": \"{{SalesOrderItemObjectID}}\",\n\t\"TaxationCharacteristicsCode\": \"501\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceAndTaxCalculationCollection('{{SalesOrderItemPriceAndTaxObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceAndTaxCalculationCollection('{{SalesOrderItemPriceAndTaxObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item custom list price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Custom list price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"7PR1\",\n    \"Description\": \"New List Price\",\n\t\"DecimalValue\": \"700.00\",\n\t\"CurrencyCode\": \"EUR\",\n\t\"BaseDecimalValue\": \"2\",\n\t\"BaseMeasureUnitCode\": \"EA\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item product discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Product discount created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"7PR6\",\n    \"Description\": \"Special Discount\",\n    \"DecimalValue\": \"8\",\n    \"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item surcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Surcharge price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"7PR3\",\n    \"Description\": \"Preferred assembly\",\n\t\"DecimalValue\": \"15.00\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item surcharge (%)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Surcharge (%) price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"7PR2\",\n    \"Description\": \"Weekend processing surcharge (%)\",\n\t\"DecimalValue\": \"5.00\",\n\t\"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order with header price components",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"//pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"//pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"//pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d61a7eee-f189-4894-9bb4-a2c6b3c5e0ff",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,PriceAndTaxCalculation/PriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,PriceAndTaxCalculation/PriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create overall discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"0007\",\n\t\"DecimalValue\": \"10\",\n\t\"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create freight surcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"7PR8\",\n\t\"DecimalValue\": \"50\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create surcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"0001\",\n\t\"DecimalValue\": \"30\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"//pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"//pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"//pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a937124-e387-455d-8671-0e48f577e0ba",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,PriceAndTaxCalculation/PriceComponent,Item/ItemPriceAndTaxCalculation/ItemPriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,PriceAndTaxCalculation/PriceComponent,Item/ItemPriceAndTaxCalculation/ItemPriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Sales Order with price components (gross)",
			"item": [
				{
					"name": "Get xsrf-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"Cross-site request forgery token received\", function () { pm.response.to.have.header(\"x-csrf-token\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2e8f837-8860-4a09-9931-7d6db97f5cdf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create sales order with gross princing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results.ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results.UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results.ID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results.ID + \" created\", function () { pm.response.to.have.status(201) });",
									"//Inconsistent if cross list price list missing",
									"//pm.test(\"Consistency status: \" + jsonResponse.d.results.ConsistencyStatusCodeText, function () { pm.expect(jsonResponse.d.results.ConsistencyStatusCode).to.eql(\"3\") });",
									"pm.test(\"Lifecycle  status: \" + jsonResponse.d.results.LifeCycleStatusCodeText, function () { pm.expect(jsonResponse.d.results.LifeCycleStatusCode).to.eql(\"4\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Set External Reference of pattern KH-<UTC datetime>",
									"var generatedBuyerID = \"KH-\" + (new Date()).toISOString().substr(0,16);",
									"pm.environment.set(\"SalesOrderExternalReference\", generatedBuyerID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ExternalReference\": \"{{SalesOrderExternalReference}}\",\n\t\"Name\": \"Sample Sales Order with price components (gross)\",\n\t\"DataOriginTypeCode\": \"1\",\n\t\"SalesUnitParty\":\n\t\t{\t\n\t\t\t\"PartyID\": \"{{SalesUnitID}}\"\n\t\t}, \t\n\t\"BuyerParty\":\n\t\t{\n\t\t\t\"PartyID\": \"{{CustomerID2}}\"\n\t\t},\n\t\"PricingTerms\":\n\t\t{\n\t\t\t\"CurrencyCode\": \"EUR\",\n\t\t\t\"GrossAmountIndicator\": true\n\t\t},\n\t\"Item\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"ID\": \"10\",\n\t\t\t\t\"ProcessingTypeCode\": \"TAN\",\n\t\t\t\t\"ItemProduct\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"ProductID\": \"{{MaterialID_stock}}\"\n\t\t\t\t\t},\n\t\t\t\t\"ItemScheduleLine\":\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Quantity\": \"2\",\n\t\t\t\t\t\t\t\"unitCode\": \"EA\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t}\n\t\t]\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order with item price components",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"//pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Loop price components and get list price component",
									"pm.environment.set(\"SalesOrderItemPriceComponentObjectID\", null);",
									"let numberOfItems = Number(jsonResponse.d.__count);",
									"for (let index = 0; index < numberOfItems; index++) {",
									"    if (jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ItemPriceComponent[index].TypeCode == '7PR1') {",
									"        pm.environment.set(\"SalesOrderItemPriceComponentObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ItemPriceComponent[index].ObjectID);",
									"    }",
									"}",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,Item/ItemPriceAndTaxCalculation/ItemPriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation&$inlinecount=allpages",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,Item/ItemPriceAndTaxCalculation/ItemPriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation"
								},
								{
									"key": "$inlinecount",
									"value": "allpages"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item tax code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Tax code updated\", function () { pm.response.to.have.status(204) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n\t\"ParentObjectID\": \"{{SalesOrderItemObjectID}}\",\n\t\"TaxationCharacteristicsCode\": \"501\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceAndTaxCalculationCollection('{{SalesOrderItemPriceAndTaxObjectID}}')",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceAndTaxCalculationCollection('{{SalesOrderItemPriceAndTaxObjectID}}')"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item custom gross list price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Custom list price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PR1\",\n    \"Description\": \"New Gross List Price\",\n\t\"DecimalValue\": \"700.00\",\n\t\"CurrencyCode\": \"EUR\",\n\t\"BaseDecimalValue\": \"2\",\n\t\"BaseMeasureUnitCode\": \"EA\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item gross product discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Product discount created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PR6\",\n    \"Description\": \"Special Discount\",\n    \"DecimalValue\": \"8\",\n    \"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item gross surcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Surcharge price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PR3\",\n    \"Description\": \"Preferred assembly\",\n\t\"DecimalValue\": \"15.00\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create item gross surcharge (%)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"// Validations",
									"pm.test(\"Sales order item: Surcharge (%) price component created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderItemPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PR2\",\n    \"Description\": \"Weekend processing surcharge (%)\",\n\t\"DecimalValue\": \"5.00\",\n\t\"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/ItemPriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"ItemPriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order with header price components",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"//pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"//pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"//pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d61a7eee-f189-4894-9bb4-a2c6b3c5e0ff",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,PriceAndTaxCalculation/PriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,PriceAndTaxCalculation/PriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create gross overall discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order: Price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"1007\",\n\t\"DecimalValue\": \"10\",\n\t\"MeasureUnitCode\": \"P1\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create gross freight surcharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order: Price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PR8\",\n\t\"DecimalValue\": \"50\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create gross restocking fee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b9bbf9-6725-4134-89e9-f2347dde8747",
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderPriceComponentObjectID\", jsonResponse.d.results.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order: Price component (\" + jsonResponse.d.results.TypeCodeText + \") created\", function () { pm.response.to.have.status(201) });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c48396a-8f50-4024-8dfa-a3c7594fd8a6",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 3000); // wait 3 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "{{x-csrf-token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"ParentObjectID\": \"{{SalesOrderPriceAndTaxObjectID}}\",\n    \"TypeCode\": \"8PRB\",\n\t\"DecimalValue\": \"30\",\n\t\"CurrencyCode\": \"EUR\"\n}    \t"
						},
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/PriceComponentCollection",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"PriceComponentCollection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38f9015-76c9-4c82-98d1-4b7251b30302",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.environment.set(\"SalesOrderObjectID\", jsonResponse.d.results[0].ObjectID);",
									"pm.environment.set(\"SalesOrderUUID\", jsonResponse.d.results[0].UUID);",
									"pm.environment.set(\"SalesOrderID\", jsonResponse.d.results[0].ID);",
									"pm.environment.set(\"SalesOrderPriceAndTaxObjectID\", jsonResponse.d.results[0].PriceAndTaxCalculation.ObjectID);",
									"//pm.environment.set(\"SalesOrderItemObjectID\", jsonResponse.d.results[0].Item[0].ObjectID);",
									"//pm.environment.set(\"SalesOrderItemPriceAndTaxObjectID\", jsonResponse.d.results[0].Item[0].ItemPriceAndTaxCalculation.ObjectID);",
									"",
									"// Validations",
									"pm.test(\"Sales order \" + jsonResponse.d.results[0].ID + \" returned\", function () { pm.response.to.have.status(200) });",
									"//pm.test(\"Item \" + jsonResponse.d.results[0].Item[0].ID + \" returned\", function () { pm.expect(jsonResponse.d.results[0].Item[0].ID).to.eql(\"10\") });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a937124-e387-455d-8671-0e48f577e0ba",
								"exec": [
									"// Delay request\r",
									"setTimeout(function() {}, 2000); // wait 2 sec"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=PricingTerms,PriceAndTaxCalculation/PriceComponent,Item/ItemPriceAndTaxCalculation/ItemPriceComponent&$filter=ID eq '{{SalesOrderID}}'&$select=ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "PricingTerms,PriceAndTaxCalculation/PriceComponent,Item/ItemPriceAndTaxCalculation/ItemPriceComponent"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{SalesOrderID}}'"
								},
								{
									"key": "$select",
									"value": "ObjectID,UUID,ID,Name,ConsistencyStatusCode,ConsistencyStatusCodeText,LifeCycleStatusCode,LifeCycleStatusCodeText,GrossAmount,NetAmount,NetAmountCurrencyCode,NetAmountCurrencyCodeText,PricingTerms,PriceAndTaxCalculation,Item/ObjectID,Item/ID,Item/Description,Item/ItemPriceAndTaxCalculation"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Miscellaneous Samples",
			"item": [
				{
					"name": "Get metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e62e94d-f718-4db5-86fa-22e27ebb5825",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65823112-7d5a-4ed2-ab1b-c78b1ba6c0cc",
								"type": "text/javascript",
								"exec": [
									"//Initialize dynamic environment variables",
									"pm.environment.set(\"x-csrf-token\", \"\");",
									"pm.environment.set(\"SalesOrderExternalReference\", \"\");",
									"pm.environment.set(\"SalesOrderObjectID\", \"\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/$metadata?sap-label=true&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"$metadata"
							],
							"query": [
								{
									"key": "sap-label",
									"value": "true"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get codelist for currency codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2b4e734-e01c-45a9-97ce-cb86306ea5d6",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderGrossAmountCurrencyCodeCollection?$format=json&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderGrossAmountCurrencyCodeCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get codelist for item processing type code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2b4e734-e01c-45a9-97ce-cb86306ea5d6",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderItemProcessingTypeCodeCollection?$format=json&sap-language=en",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderItemProcessingTypeCodeCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "sap-language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order using filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83cee03a-84bf-4457-9cad-1845665e18b2",
								"exec": [
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"// Validations",
									"pm.test(\"201 - Sales order data returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine&$filter=ID eq '3*' and (ExternalReference eq 'KH-2018*' or ExternalReference eq 'KH-2019*')&$inlinecount=allpages&$top=10",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$expand",
									"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								},
								{
									"key": "$filter",
									"value": "ID eq '3*' and (ExternalReference eq 'KH-2018*' or ExternalReference eq 'KH-2019*')"
								},
								{
									"key": "$inlinecount",
									"value": "allpages"
								},
								{
									"key": "$top",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sales order using search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc5c7d0b-8e34-4678-9484-ccf2c8266885",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderCollection?$format=json&$search=KH*&$top=3&$inlinecount=allpages&$expand=BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$filter",
									"value": "ID eq '{{ID}}'",
									"disabled": true
								},
								{
									"key": "$search",
									"value": "KH*"
								},
								{
									"key": "$top",
									"value": "3"
								},
								{
									"key": "$inlinecount",
									"value": "allpages"
								},
								{
									"key": "$expand",
									"value": "BuyerParty/BuyerPartyName,SalesUnitParty/SalesUnitPartyName,PricingTerms,Item/ItemProduct,Item/ItemScheduleLine"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query sales order by elements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
								"exec": [
									"",
									"pm.environment.set(\"x-csrf-token\", postman.getResponseHeader(\"x-csrf-token\"));",
									"",
									"var jsonResponse = pm.response.json();",
									"",
									"// Validations",
									"pm.test(\"200 - Response OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Cross site request forgery token:  received\", function () {",
									"    pm.response.to.have.header(\"x-csrf-token\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khsalesorder/SalesOrderQueryByElements?NumberOfRows='20'&SalesOrganisationID='{{SalesUnitID}}'&ID='3*'",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khsalesorder",
								"SalesOrderQueryByElements"
							],
							"query": [
								{
									"key": "NumberOfRows",
									"value": "'20'"
								},
								{
									"key": "StartRow",
									"value": "'5'",
									"disabled": true
								},
								{
									"key": "SalesOrganisationID",
									"value": "'{{SalesUnitID}}'"
								},
								{
									"key": "ID",
									"value": "'3*'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payments (new payment monitor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6abbca20-e715-4e12-83bf-4f59a566f089",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81136713-2039-47d6-8e37-0e7919c4abde",
								"exec": [
									"// Set payments filter date: today (format: 2019-05-15T00:00:00.0000000Z)",
									"let moment = require('moment');",
									"let paymentsDate = moment().add(-30,'day').toISOString().substr(0,10) + \"T00:00:00.0000000Z\";",
									"pm.environment.set(\"PaymentsSelectionDate\", paymentsDate);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-csrf-token",
								"value": "fetch"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{TenantHostname}}/sap/byd/odata/cust/v1/khpayment/PaymentCollection?$format=json&$inlinecount=allpages&$filter=CreationDateTime ge datetimeoffset'{{PaymentsSelectionDate}}'&$top=10",
							"protocol": "https",
							"host": [
								"{{TenantHostname}}"
							],
							"path": [
								"sap",
								"byd",
								"odata",
								"cust",
								"v1",
								"khpayment",
								"PaymentCollection"
							],
							"query": [
								{
									"key": "$format",
									"value": "json"
								},
								{
									"key": "$inlinecount",
									"value": "allpages"
								},
								{
									"key": "$filter",
									"value": "CreationDateTime ge datetimeoffset'{{PaymentsSelectionDate}}'",
									"description": "Payments of last 30 days"
								},
								{
									"key": "$expand",
									"value": "CompanyName,HouseBankAccount",
									"disabled": true
								},
								{
									"key": "$top",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{Password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{User}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "457c4747-d131-4824-836f-816f890c576d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7824a77b-890c-46e3-983c-d87f376443b0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}